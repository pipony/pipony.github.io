<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2MUCH-Tech-Notes</title>
    <link>http://pipony.github.io/</link>
    <description>Recent content on 2MUCH-Tech-Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Cindy</copyright>
    <lastBuildDate>Wed, 15 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://pipony.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux运维篇之top</title>
      <link>http://pipony.github.io/post/shell/linux%E8%BF%90%E7%BB%B4%E7%AF%87%E4%B9%8Btop/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/shell/linux%E8%BF%90%E7%BB%B4%E7%AF%87%E4%B9%8Btop/</guid>
      <description>Linux运维篇之top 概念 实时显示系统进程信息的命令、内存使用情况、系统负载情况等（有点类似于Windows系统下的任务管理器）
执行权限：所有用户
命令 #TODO
快捷键 摘自：https://blog.csdn.net/Luckiers/article/details/123909819#/
Ctrl+L 擦除并且重写屏幕。  h或者? 显示帮助画面，给出一些简短的命令总结说明。  k 终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号；如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽。  i 忽略闲置和僵死进程。这是一个开关式命令。  q 退出程序。  r 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10。  S 切换到累计模式。  s 改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加。  f或者F 从当前显示中添加或者删除项目。  o或者O 改变显示项目的顺序。  l 切换显示平均负载和启动时间信息。  m 切换显示内存信息。  t 切换显示进程和CPU状态信息。  c 切换显示命令名称和完整命令行。  M 根据驻留内存大小进行排序。  P 根据CPU使用百分比大小进行排序。  T 根据时间/累计时间进行排序。  W 将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。 结果解读 解读截图（来自 https://blog.csdn.net/zhuoya_/article/details/81049967#/）：
分析：top命令截图（以我自己的云主机为例）
前5行是系统状态总览，后面是依次分析系统正在运行的每个任务的状态
  第1行：任务队列信息（同 uptime 命令的执行结果，依次是当前时间、系统已经运行的时间、当前用户数、系统负载【即任务队列的平均长度。 三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值】）</description>
    </item>
    
    <item>
      <title>ORACLE-序列</title>
      <link>http://pipony.github.io/post/database/oracle-nextval/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/database/oracle-nextval/</guid>
      <description>ORACLE-序列  背景：了解NEXTVAL的概念
 ORACLE序列 概念 是oacle提供的用于产生一系列唯一数字的数据库对象。主要用于提供主键值。
sequence是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。**其主要的用途是生成表的主键值，可以在插入语句中引用，在插入之前，获取序列号nextval值，然后进行插入。**也可以通过查询检查当前值，或使序列增至下一个值。（https://www.jb51.net/article/220007.htm#/）
创建方式 CREATE SEQUENCE sequence //创建序列名称   [INCREMENT BY n] //递增的序列值是n 如果n是正数就递增,如果是负数就递减 默认是1   [START WITH n] //开始的值,递增默认是minvalue 递减是maxvalue   [{MAXVALUE n | NOMAXVALUE}] //最大值   [{MINVALUE n | NOMINVALUE}] //最小值   [{CYCLE | NOCYCLE}] //循环/不循环   [{CACHE n | NOCACHE}];//分配并存入到内存中 CURRVAL CURRVAL 中存放序列的当前值
SELECT INR_REQUIRMENT_SQUENCE.CURRVAL FROM dual - 获取当前的sequence的值
CURRVAL = 最后一次对 NEXTVAL 的引用所返回的值
NEXTVAL NEXTVAL 返回序列中下一个有效的值，任何用户都可以引用</description>
    </item>
    
    <item>
      <title>SQL函数篇</title>
      <link>http://pipony.github.io/post/database/sql%E5%87%BD%E6%95%B0%E7%AF%87/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/database/sql%E5%87%BD%E6%95%B0%E7%AF%87/</guid>
      <description>SQL函数篇   lpad/rpad函数   lpad/rpad函数 此为Oracle函数。l/r(left/right)+pad(填充)，表示从左边/右边填充。
格式：lpad( string, padded_length, [ pad_string ] ) （rpad同理）
参数一：被填充/截取的原字符串
参数二：最终长度
参数三：填充的字符，若无赋值，则默认填充空格
注意：若原字符串长度大于参数二的长度，则lpad从左开始截取指定长度（rpad从右边）
SQL&amp;gt; select lpad(&amp;#39;abcde&amp;#39;,10,&amp;#39;x&amp;#39;) from dual; LPAD(&amp;#39;ABCDE&amp;#39;,10,&amp;#39;X&amp;#39;) -------------------- xxxxxabcde  SQL&amp;gt; select lpad(&amp;#39;abcde&amp;#39;,2) from dual; LPAD(&amp;#39;ABCDE&amp;#39;,2) --------------- ab 参考链接：https://blog.csdn.net/yulei_qq/article/details/17389901#/</description>
    </item>
    
    <item>
      <title>异常的处理</title>
      <link>http://pipony.github.io/post/java/%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/java/%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86/</guid>
      <description>异常的处理 分类  异常（Exception）  运行时异常RuntimeException（不受检异常）：此类异常编译器不检查，一般是程序逻辑错误引起的，可捕获处理，也可不处理。如NullPointerException、ArrayIndexOutBoundException。 非运行时异常/编译时异常（受检异常）：编译器检查此类异常，并且强制要做处理（捕获或抛出）。如IOException。   错误（Error）：非代码性错误，与异常不同的是，这类错误是程序无法处理的。此类错误发生时，JVM将终止线程。如Virtual MachineError（虚拟机运行错误）、NoClassDefFoundError（类定义错误）。  异常的层次 Exception和Error都继承自Throwable类。层次图可见下图（列出主要的异常类）
常见内置异常类 Java 语言定义了一些异常类在 java.lang 标准包中。主要分类可见 https://www.runoob.com/java/java-exceptions.html#/
或者链接 https://blog.csdn.net/Pandafz1997/article/details/119898686#/ 给出的：
异常类	说明 ClassCastException	类型转换异常 ArrayIndexOutOfBoundsException	数组越界异常 NegativeArraySizeException	指定数组维数为负值异常 ArithmeticException	算数异常 InternalException	Java系统内部异常 NullPointerException	空指针异常 IllegalAccessException	类定义不明确所产生的异常 IOException	一般情况下不能完成I/O操作产生的异常 EOFException	打开文件没有数据可以读取的异常 FileNotFoundException	在文件系统中找不到文件路径或文件名称时的异常 ClassNotFoundException	找不到类或接口所产生的异常 CloneNotSupportedException	使用对象的clone方法但无法执行Cloneable所产生的异常
异常处理 方法1：捕获处理 try+catch(+finally)
try {  xxx; //程序 } catch (ExceptionName e) {  xxx; //捕获异常时的处理 } finally {  xxx; //最终执行的代码块 } 若指定捕获特定的异常类，则在catch中指定异常类；若要捕获任意异常，则直接用Exception e。</description>
    </item>
    
    <item>
      <title>开始Hugo&#43;Github Pages</title>
      <link>http://pipony.github.io/post/other/%E5%BC%80%E5%A7%8Bhugo&#43;github-pages/</link>
      <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/other/%E5%BC%80%E5%A7%8Bhugo&#43;github-pages/</guid>
      <description>开始Hugo+Github Pages 参考：https://www.gohugo.org/#/
准备工作准备 安装Hugo，git过程略
配置Hugo路径到环境变量Path 过程略
生成站点 hugo new site /D:/hugo/huangxdBlog 生成站点到本地路径：/D:/hugo/huangxdBlog
可以看到/D:/hugo/huangxdBlog下已生成初始站点结构：
 ▸ archetypes/  ▸ content/  ▸ layouts/  ▸ static/  config.toml 创建文章 hugo new about.md 生成路径自动为：/content/about.md
hugo new post/first.md 生成路径自动为：/content/post/about.md
安装皮肤模板 从 https://www.gohugo.org/theme/#/ 或者 https://themes.gohugo.io/#/挑选合适的模板，下载
$ cd themes $ git clone https://github.com/spf13/hyde.git 本地调试 在本地运行并预览网站效果
hugo server --theme=angels-ladder --buildDrafts 注意：将hyde换成自己的主题名
如果已经在config.toml中配置了theme，则运行语句可以缩减为：
hugo server --buildDrafts 浏览器里打开链接，可浏览本地效果:
 http://localhost:1313 部署 GitHub上先新建一个仓库（命名：#pipony#(换成自己的github用户名).github.io） 生成最终页面 在根目录执行：
hugo --theme=hyde --baseUrl=&amp;#34;http://pipony.github.io/&amp;#34; 同理：在配置文件中若已经指定了主题，则可以忽略--theme参数：</description>
    </item>
    
    <item>
      <title>数据库无效对象</title>
      <link>http://pipony.github.io/post/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A0%E6%95%88%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A0%E6%95%88%E5%AF%B9%E8%B1%A1/</guid>
      <description>数据库无效对象  背景：报“ORACLE存在无效对象，可能影响应用性能，评估是否重建对象”
 概念  无效：INVALID 对象：视图、物化视图、函数、包、触发器等   无效 PL/SQL 对象和不可用索引会对性能产生影响。无效 PL/SQL 对象必须先进行重编译，然后才能使用。这需要在执行尝试访问 PL/SQL 程序包、过程或函数的第一个操作之前花费一段编译时间。如果 PL/SQL 重编译未成功，，则操作会因发生错误而失败。优化程序会忽略不可用索引。如果 SQL 语句性能的好坏取决于已标记为不可用的索引，则只有重建索引才能改善性能。
  如果查找到 INVALID 状态的 PL/SQL 对象，需要回答的第一个问题是“此对象曾经是 VALID 的吗？”应用程序开发人员常常会忘记清除不起作用的代码。如果 PL/SQL 对象因代码错误而无效，则除了纠正该错误之外，没有什么别的方法。如果该过程在过去曾经有效，最近才变为无效，则可选择以下两种方法解决这个问题：
1.不做任何处理。如果需要，大多数 PL/SQL 对象在调用时会自动重新编译。用户在对象重新编译时会经历短暂的延迟。（大多数情况下，这种延迟不十分明显。）
2.手动重新编译无效对象。
 无效对象产生的原因   当被引用对象的结构变更时，都会使得相关的依赖对象转变为INVALID状态
如视图A来源于表B，当表B的结构改变时，会导致视图A变成无效对象。但当再一次调用视图A时，会自动编译视图A，使其再次变为有效。
  发布SQL脚本时（包、存储过程、函数等），没有充分测试，编译时出错，这时对象变为无效。
  数据库升级、迁移时，出现大量无效对象(本质原因，臆测归结为原因1)
  诸如此类各种情况：例如，Oracle 会自动维护分区索引，对于全局索引，如果在对分区表操作时，没有指定update index，则会导致全局索引失效，需要重建。
  查找无效对象  统计失效对象  执行用户：SYSTEM用户或其他有权限的用户
SQL&amp;gt; select owner, object_name, object_type from dba_objects t where status = &amp;#39;INVALID&amp;#39; order by t.</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-00 无分类</title>
      <link>http://pipony.github.io/post/software-designer/00-%E6%97%A0%E5%88%86%E7%B1%BB/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/00-%E6%97%A0%E5%88%86%E7%B1%BB/</guid>
      <description>00 无分类 海明码（Hamming code） https://www.bilibili.com/video/BV1SJ41157pR?spm_id_from=333.337.search-card.all.click#/
https://www.cnblogs.com/godoforange/p/12003676.html#/
遇到这种题，做题练一下
CRC校验法（循环冗余校验 Cyclic Redundancy Check） https://seedeer.github.io/2022/03/20/crc/#/
https://www.bilibili.com/video/BV1rJ411V7L5?spm_id_from=333.337.search-card.all.click#/</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-01 计算机组成与体系结构</title>
      <link>http://pipony.github.io/post/software-designer/01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</guid>
      <description>01 计算机组成与体系结构 数据的表示 进制转换 R进制-&amp;gt;十进制：底数，指数
十进制-&amp;gt;R进制：短除法
二进制-&amp;gt;八进制，十六进制
编码  原码：正常转为二进制，位数不足前面补0。最高位为符号位（0正1负） 反码：正数=原码；负数：符号位不动，其他位原码取反 补码：正数=原码；负数：反码+1 移码：一般用来做浮点运算的阶码；符号位为补码的反，其他位一样。这样在数轴上，正数在负数的右边，看起来正常些  ps. 原码：1-1为-2，是不正常的，因此计算机里不能用原版来做加减
移码 https://blog.csdn.net/Desire_Dir_W/article/details/114399797#/
表示范围 为何补码比原/反码多一个数：原/反码有正负0，补码只有一种0的表示
浮点数运算 M*R^e
M：尾数；R：基数：e：指数
对阶（小向大的指数对） - 尾数计算 - 结果格式化（尾数小数点左边是1）
计算机结构 主机=CPU（运算器+控制器）+主存储器
Flynn分类法 单I/多M+指令I/数据D
SISD 现在的机器几乎没有，可能在单片机用到
SIMD 阵列处理机：适合处理数组运算
MISD 只在理论中
MIMD 全面并行
CISC和RICS CISC 比较早期，通常是定制。指令数量多；可变长格式
RICS 复杂操作由简单操作组成即可；定长格式；操作寄存器；硬布线（速度快）
流水线 主要考察计算
周期 概念：执行时间最长的一个步骤时间
n条指令全部执行时间：
 理论公式：1条指令执行时间+（指令条数-1）*流水线周期 实践公式：（k+n-1）*周期；k为子指令个数  考试时优先用理论公式算，没有这个选项，再用实践公式
吞吐率 概念：单位时间内处理指令条数
公式：TP=指令条数/流水线时间
最大吞吐率：
理解：极限情况下（不考虑流水线建立的时间等），1条指令配合上一个流水线周期
加速比 概念及公式：同一个任务不使用流水线时间/使用流水线时间
效率 概念：流水线的设备利用率。时空图中，设备占用时空区占总时空区之比。
公式：
每个子任务时间一样 -&amp;gt; 效率最高
存储 层次化存储结构 cache 特点：</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-02 操作系统</title>
      <link>http://pipony.github.io/post/software-designer/02-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/02-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description>02 操作系统 概述 操作系统的角色：
 管理系统的硬件、软件、数据资源 控制程序运行 人机之间的接口 应用软件与硬件之间的接口  管理分类：
 进程管理 存储管理 文件管理 作业管理 设备管理  进程状态 三态模型
 运行：万事具备 就绪：只等CPU资源 等待：除了CPU资源，还在等其他资源  五态模型
 运行 静止就绪（运行过程中主动挂起） 活跃就绪 静止阻塞 活跃阻塞=等待  前趋图 同步与互斥  互斥：一个资源同时只能被一个进程所用 同步：速度有差异，一定情况下要等待  【注意】：两者不为相反的概念，互斥&amp;lt;-&amp;gt;共享，同步&amp;lt;-&amp;gt;异步
在生产者消费者问题，理解互斥和同步：如一个商场只能存放一件物品，若目前已有一件时，生产者无法将新的一件放入（互斥）；生产者是否可以放入也取决于消费者是否消费了这个物品，只有等消费者消费了，生产者才能新生产（同步）
PV操作 概念 临界资源：进程间需要互斥访问的资源（如打印机，磁带机）
临界区：每个进程中访问临界资源的那段代码
信号量：一种特殊的变量，如P(s)中的s
P分配（减），V释放（加）
例子（单缓冲区）：
习题：
答案：A和C
PV操作和前趋图 【重要！经常考！】
例题（答案：CAA）：
解题思路：信号量的赋值可根据从上到下、从左到右的原则赋值，出箭头设为V(s)，入箭头设为P(s)。如P1出箭头那里是V(S1)，P2出箭头那里是V(S2)，P3入箭头那里是P(S1)和P(S2)。
死锁 最小需要多少个资源不发生死锁 公式：k*(n-1)+1；k：进程数，n，每个进程需要的资源数
死锁四大条件  互斥 保持和等待 不剥夺 环路等待  解决死锁  预防：打破四大条件 避免：有序资源分配法，银行家算法  银行家算法 例题：</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-03 数据库系统</title>
      <link>http://pipony.github.io/post/software-designer/03-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/03-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</guid>
      <description>03 数据库系统 三级模式-两级映射  内模式（物理级数据库）：如何存储数据（格式等） 概念模式（概念级数据库）：表级别（关注【概念模式-内模式映射】） 外模式（用户级数据库）：视图（隔绝概念模式的修改【外模式-概念模式映射】，灵活性）  数据库设计过程 ER模型：与物理数据库无关
关系模式：表形式，规范化理论
E-R模型 矩形：实体；椭圆：属性；菱形：关系
子模型集成
 逐步集成 一次集成  集成产生的冲突
 属性冲突（属性域或取值冲突） 命名冲突（同名异义，异名同义） 结构冲突（可能一个作为表，一个作为列）  实体型转换为关系模式
 1：1 - 转成两张表，菱形联系可跟任意一个 1：n - 转成两张表，菱形联系跟N m：n - 转成三章表，菱形联系单独一张表  ps.即使是多对多对多的，也只需一个关系来表示菱形
关系代数   并：注意：相同行只显示一次
  交
  差
  笛卡尔积（✖）：完全组合；属性数为两关系相加；行数为两关系行数相乘
  投影
  选择
   连接：都有的属性只保留一个**（这点和笛卡尔积不同）**；等值连接、自然连接  规范化理论 函数依赖 部分函数依赖：其中的某一个属性，可以形成函数依赖
价值与作用 非规范化可能存在的问题：数据冗余，更新/插入/删除异常
键  超键（可能存在冗余属性）：唯一标识元组 候选键（超键消除多余属性-&amp;gt;候选键，可以有多个） 主键（候选键任选一个） 外键：其他关系的主键，对表做关联的时候可用  求候选键：图示法</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-04 计算机网络</title>
      <link>http://pipony.github.io/post/software-designer/04-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/04-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
      <description>04 计算机网络 OSI/RM七层模型 中继器/集线器：延长传输距离（类似烽火台）
例题：
分析：考察局域网的通信范围，局域网是下面两层（物理层和数据链路层连接的），所以P和S之间经过路由器（网络层）的话，就不能通信。
网络技术标准和协议 TCP：三次握手，可靠传输
UDP：没有反馈过程
DHCP：IP地址动态分配
DNS：域名映射到IP地址
递归查询：亲自深挖，不断根据线索问其他服务器，最终把正确的IP反馈给客户（如本地域名服务器，因为其压力不大）
迭代查询：只提供线索，没有刨根究底（如根域名服务器）
计算机网络分类 拓扑结构 单点故障：环形比星型稳定，因为一个点故障可以从另一头走
网络规划与设计 逻辑网格设计 物理网络设计 分层设计（考比较多） IP地址与子网划分 全0：网络地址；全1：广播地址
A类：前8位网络号，后24位为主机号，可包含2^24-2主机
B类：前16位网络号，后16位为主机号，可包含2^16-2主机
C类：前24位网络号，后8位为主机号，可包含2^8-2主机
例题：
或者问是否在同一个子网内，怎么看：把ip化为2进制，根据网络号有多少位，看最终的网络号是否相同
无分类编制 例题：
分析：已知C类子网有24位的网络号，现在是20位，也就是还有4位可以拿来作子网号，2^4=16
特殊含义的IP地址 HTML（考的少） 无线网 网络接入技术 IPv6 IPv4：32位地址，地址不够用
IPv4：128位地址</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-05 计算机安全</title>
      <link>http://pipony.github.io/post/software-designer/05-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/05-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/</guid>
      <description>05 计算机安全 信息系统安全属性 完整性：保证A到B的消息没被篡改
加密技术  对称加密   非对称加密  信息摘要 特性：单向
用于验证数据完整性
数字签名 特性：防抵赖
加密（即数字签名）：私钥；解密（即数字签名的验证过程）：公钥；不是真正的加密和解密
与信息摘要技术结合：对信息摘要进行数字签名（而不是对原消息进行数字签名）
数字信封与PGP 综合例题 例题：设计邮件加密系统
网络安全 网络层级的安全保障 网络威胁与攻击 要会区分窃听和业务流分析
防火墙技术 应用级：把内容拆出来分析看有无问题
网络级：比如看源和目的ip
屏蔽子网：内部网和外部网之间额外的一个防护</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-06 数据结构与算法基础</title>
      <link>http://pipony.github.io/post/software-designer/06-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/06-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</guid>
      <description>06 数据结构与算法基础 数组 考点：存储地址计算
稀疏矩阵 矩阵坐标转换到数组坐标的解题技巧：带入特殊值
数据结构的定义 概念：计算机存储和组织数据的方式
逻辑结构划分
 线性结构 非线性结构  树 图    线性表 分类
  顺序表（一维数组形式）
  链表（节点包含数据与指针）
 单链表 循环链表 双向链表    队列（先进先出）
  循环队列
    栈（先进后出）
  链表的基本操作（删除和插入节点）
顺序存储和链式存储对比：
广义表 概念：线性表的推广，以递归的方式进行定义
广度（最外层括号包含的元素个数）、深度（包含括号的重数）
表头head（最外括号的第一个元素）、表尾tail（除去表头的其他所有部分）
树与二叉树 结点的度：孩子数
数的度：所有结点度数最高的度
内部节点：非头节点和叶子节点
深度：最大的层数
特殊二叉树  满二叉树 完全二叉树（除最后一层，上面层都满；且最后一层从左到右没有中间缺失的情况）  二叉树遍历   前、中、后序遍历：差别在根节点前、中、后时候被访问
  层次遍历
  反向构造二叉树 例题：</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-07 程序设计语言与语言处理程序基础</title>
      <link>http://pipony.github.io/post/software-designer/07-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/07-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/</guid>
      <description>07 程序设计语言与语言处理程序基础 编译过程 文法定义 有限自动机 例题（常考）：
答案：C
正规式 例题：
答案：D C
表达式 答案：D
函数调用 - 传值和传址  传值：不真正改变实参 传址：真正改变实参  各种程序语言特点 </description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-08 法律法规</title>
      <link>http://pipony.github.io/post/software-designer/08-%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/08-%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84/</guid>
      <description>08 法律法规 保护期限 知识产权人确定 侵权判定 标准化基础知识 标准的分类 标准的编号 </description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-09 多媒体基础</title>
      <link>http://pipony.github.io/post/software-designer/09-%E5%A4%9A%E5%AA%92%E4%BD%93%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/09-%E5%A4%9A%E5%AA%92%E4%BD%93%E5%9F%BA%E7%A1%80/</guid>
      <description>09 多媒体基础 基本概念 音频概念 次声波：&amp;lt;20Hz；超声波：&amp;gt;20kHz
图像概念  亮度 色调（如红，绿） 饱和度：色彩艳丽程度  彩色空间：
CMY：印刷领域；CMYK（K：黑色）
HSV(HSB)：艺术家空间，从艺术欣赏的角度
媒体的种类 易考：输入设备也包含在显示（表现媒体）媒体中
多媒体相关计算 例题：
注意单位和(k和K：k为1000，存储的K为1024)
常见多媒体标准 数据压缩 压损的前提：有冗余
有损压缩与无损压缩 </description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-10 软件工程</title>
      <link>http://pipony.github.io/post/software-designer/10-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/10-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</guid>
      <description>10 软件工程 软件开发模型 瀑布模型（SDLC） 缺陷：需求难以在项目初期明确确定
适用于：
 需求明确 二次开发 结构化开发  其他经典模型 原型（针对需求不明确的情况）：在初期先构造一个简易的系统，给用户做演示，记录用户发现的问题，再做调整。往往只用于需求分析阶段。最终变为演化模型。
增量模型：先做核心部分，给用户用；发现问题，逐步修改和继续开发剩下内容。
螺旋模型 特征：
 多个模型组成 引入了风险分析  V模型 特点：
 强调测试 在前半部分的过程，同时也做后半部分的测试准备  喷泉模型 特点：
 面向对象模型 迭代 无间隙  RAD 特点：
 快速构建应用系统  构件组装模型(CBSD) 特点：
 提高复用性，缩短时间，减少成本，提高可靠性  统一过程（UP/RUP） 特点：
 用例驱动 以架构为中心 多轮迭代和增量  敏捷开发方法 特点：
 一组模型 比较适合(中)小型项目  信息系统开发方法 结构化方法缺点：一旦开发完，整个流程不容易改变
需求开发 需求分类与获取 结构化设计 多扇入：复用性高；少扇出：一个函数包括的职能较少
内聚与耦合 软件测试（常考） 回归测试：将之前的测试案例再测下，看会不会发现新的问题
测试用例设计 等价类划分：选出各种类的代表性数据来测
错误推测：根据经验，推测哪些容易产生问题
测试阶段 单元测试：模块级/函数级</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-11 面向对象设计</title>
      <link>http://pipony.github.io/post/software-designer/11-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/11-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/</guid>
      <description>11 面向对象设计 边界类：与外界系统交互
控制类：类之间的衔接类
封装：提供给外部接口，外界用接口调用
设计原则 UML 设计模式 架构和设计模式区别：全局or局部
设计和惯用法区别：是否与实现语言相关
设计模式的分类 创建型模式 抽象工厂：只需指定生产的系列名，而不是类
构建器：部件构建组合
原型（克隆原型）：拷贝现有对象来生成新的对象
单例：保证一个类只有一个实例
结构型模式 行为型模式 </description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-12 数据流图（DFD）</title>
      <link>http://pipony.github.io/post/software-designer/12-%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BEdfd/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/12-%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BEdfd/</guid>
      <description>12 数据流图（DFD） 数据流图基本概念 自上往下细分
数据字典 数据流图的平衡原则 父图与子图之间的平衡（如顶层-&amp;gt;0层）：外部实体到系统的连线数据流内容和方向应该是不变的
子图内平衡：有输入没输出/有输出没输入，是不正常的
答题技巧 例题1 例题2：</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-13 数据库设计</title>
      <link>http://pipony.github.io/post/software-designer/13-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/13-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</guid>
      <description>13 数据库设计 数据库设计过程 ER模型 实体间联系类型  1:1 1:n m:n  E-R图向关系模型的转换 实体和联系分别转换为关系，属性转换为关系的属性
数据库设计答题技巧 例题1：
【问题4】
优点：查询操作权限属性时，会减少一次连接操作
缺点：数据冗余
例题2：
答案：</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-14 UML建模</title>
      <link>http://pipony.github.io/post/software-designer/14-uml%E5%BB%BA%E6%A8%A1/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/14-uml%E5%BB%BA%E6%A8%A1/</guid>
      <description>14 UML建模 重点：用例图、类图
用例图   包含关系 include
如每次登记外接信息都要【用户登录】，故是包含关系
  扩展关系 extend
如每次查询书籍信息不是都要【修改书籍信息】，故是扩展关系
  泛化关系
  类图与对象图 多重度：
关系：
顺序图 主要考察：
 消息：箭头来传递 对象名  活动图 粗横线：产生分支，即并行的线程
还有带泳道的活动图（划分对应的主体）：
状态图 以状态为结点，箭头为触发事件
考点：
 填充状态 填充触发事件  通信图 对象：结点；消息：箭头
与顺序图类似，但时间顺序先后不明晰。与顺序图统称为交互图。
例题 例题1 答案：
问题3：类都是音轨，多重度0..1
问题4：
例题2 【问题3】：状态图；属性：clevel；功能：计算里程数</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-15 数据结构及算法应用</title>
      <link>http://pipony.github.io/post/software-designer/15-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/15-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8/</guid>
      <description>15 数据结构及算法应用 数据结构基础那章是上午题，此章为下午题
不容易拿高分，但要把容易的都填出来
分治法 递归 概念：运行的过程中调用自己
二分查找 回溯法 贪心法 性价比方法：耗费时间少，找到【可以】的解
图示背包问题贪心法（图b左边）：优先考虑单位价值最多的物品
动态规划法 拆分为子问题，但是子问题一般有关联，所以需要一个表来协助
例题 例题1 答案：
【问题2】：贪心法；贪心法；时间复杂度分析具体代码（O(N^2),O(N^2)）
【问题1】：
例题2 题目略</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-16 面向对象程序设计</title>
      <link>http://pipony.github.io/post/software-designer/16-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/16-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>16 面向对象程序设计 类和派生类的定义 构造函数和析构函数 对象指针与对象引用
虚函数
类的定义 关键字：extends对方就是类而不是接口
接口的定义 关键字：implements 对方就是接口而不是类
例题 例题1 此类定义的填空很好拿分
例题2 </description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-开始</title>
      <link>http://pipony.github.io/post/software-designer/%E5%BC%80%E5%A7%8B/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/software-designer/%E5%BC%80%E5%A7%8B/</guid>
      <description>开始 视频教程： https://www.bilibili.com/video/BV1yU4y1371J?spm_id_from=333.337.search-card.all.click#/</description>
    </item>
    
    <item>
      <title>部分sql的user_io_wait_time值较大</title>
      <link>http://pipony.github.io/post/database/%E9%83%A8%E5%88%86sql%E7%9A%84user_io_wait_time%E5%80%BC%E8%BE%83%E5%A4%A7/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/database/%E9%83%A8%E5%88%86sql%E7%9A%84user_io_wait_time%E5%80%BC%E8%BE%83%E5%A4%A7/</guid>
      <description>部分sql的user_io_wait_time值较大  背景：报“针对近一个月的sql语句执行进行分析，每天执行较频繁的sql中，有几个sql的user_io_wait_time值较大，建议进行优化
 oracle sql 响应时间分析 1、按照IO等待取top5（https://blog.csdn.net/fengsd_sy/article/details/51322766#/）
select * from (select sql_text,  sql_id,  elapsed_time,  cpu_time,  user_io_wait_time from sys.v_$sqlarea order by 5 desc) where rownum &amp;lt; 6; 2、根据步骤1获取具体SQL详情
select event,  time_waited,  owner,  object_name,  current_file#,  current_block# from sys.v_$active_session_history a,  sys.dba_objects b where sql_id = &amp;#39;6gvch1xu9ca3g&amp;#39; and  a.current_obj# = b.object_id and  time_waited &amp;lt;&amp;gt; 0; </description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>http://pipony.github.io/about/</link>
      <pubDate>Sat, 14 May 2022 22:50:06 +0800</pubDate>
      
      <guid>http://pipony.github.io/about/</guid>
      <description>关于我 我是一个小白</description>
    </item>
    
  </channel>
</rss>
