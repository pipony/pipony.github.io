<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>http://pipony.github.io/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://pipony.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java基础之IO流</title>
      <link>http://pipony.github.io/post/workspace/01-tech/java/java%E5%9F%BA%E7%A1%80%E4%B9%8Bio%E6%B5%81/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/java/java%E5%9F%BA%E7%A1%80%E4%B9%8Bio%E6%B5%81/</guid>
      <description>Java基础之IO流 参考JAVAschool基础教程的IO流学习：http://www.51gjie.com/java/686.html
概念 IO流（stream）
流的源端和目的端可简单地看成是字节的生产者和消费者，对输入流，可不必关心它的源端是什么，只要简单地从流中读数据，而对输出流，也可不知道它的目的端，只是简单地往流中写数据。
流是一组有顺序的，有起点和终点的字节集合，是对数据传输的总称或抽象。即数据在两设备间的传输称为流，流的本质是数据传输，根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作。
http://www.51gjie.com/java/686.html
分类 数据类型：字符、字节 流向：输入、输出 方法类型：结点流、过滤器流（buffer）、数据流（也是过滤器流）&amp;hellip; 按用法分类：
(1) 按数据来源（去向）使用是文件： FileInputStream, FileOutputStream, FileReader, FileWriter是byte[]：ByteArrayInputStream, ByteArrayOutputStream是Char[]: CharArrayReader, CharArrayWriter是String: StringBufferInputStream, StringReader, StringWriter网络数据流：InputStream, OutputStream, Reader, Writer (2) 按是否格式化输出使用要格式化输出：PrintStream, PrintWriter (3) 按是否要缓冲使用要缓冲：BufferedInputStream, BufferedOutputStream, BufferedReader, BufferedWriter。(4) 按数据格式使用二进制格式（只要不能确定是纯文本的）: InputStream, OutputStream及其所有带Stream结束的子类纯文本格式（含纯英文与汉字或其他编码方式）；Reader, Writer及其所有带Reader, Writer的子类 (5) 按输入输出使用输入：Reader, InputStream类型的子类；输出：Writer, OutputStream类型的子类 (6) 特殊需要从Stream到Reader,Writer的转换类：InputStreamReader, OutputStreamWriter对象输入输出：ObjectInputStream, ObjectOutputStream进程间通信：PipeInputStream, PipeOutputStream, PipeReader, PipeWriter 合并输入：SequenceInputStream更特殊的需要：PushbackInputStream, PushbackReader, LineNumberInputStream, LineNumberReader(7) 决定使用哪个类以及它的构造进程的一般准则如下（不考虑特殊需要）： 考虑最原始的数据格式是什么：是否为文本？是输入还是输出?</description>
    </item>
    
    <item>
      <title>认识编码</title>
      <link>http://pipony.github.io/post/workspace/01-tech/other/%E8%AE%A4%E8%AF%86%E7%BC%96%E7%A0%81/</link>
      <pubDate>Mon, 19 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/other/%E8%AE%A4%E8%AF%86%E7%BC%96%E7%A0%81/</guid>
      <description>认识编码 概念 字符集 vs. 编码方式：编码方式就是将字符集里的字符映射成可以被计算机识别的若干位二进制来表示。
对于一个字符集来说要正确编码转码一个字符需要三个关键元素：字库表（character repertoire）、编码字符集（coded character set）、字符编码（character encoding form）。 其中：字库表是一个相当于所有可读或者可显示字符的数据库，字库表决定了整个字符集能够展现表示的所有字符的范围。编码字符集，即用一个编码值code point来表示一个字符在字库中的位置。字符编码，将编码字符集和实际存储数值之间的转换关系。一般来说都会直接将code point的值作为编码后的值直接存储。例如在ASCII中A在表中排第65位，而编码后A的数值是0100 0001也即十进制的65的二进制转换结果。
https://www.cnblogs.com/faetbwac/p/16355273.html
字符(Character) 是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等。 字符集(Character set) 是一个系统支持的所有抽象字符的集合。通常以二维表的形式存在，二维表的内容和大小是由使用者的语言而定。如ASCII,GBxxx,Unicode等。 字符编码(Character encoding) 是把字符集中的字符编码为特定的二进制数，以便在计算机中存储。每个字符集中的字符都对应一个唯一的二进制编码。 字符集和字符编码一般都是成对出现的，如ASCII、IOS-8859-1、GB2312、GBK，都是即表示了字符集又表示了对应的字符编码。Unicode比较特殊，有多种字符编码（UTF-8,UTF-16等）
https://www.cnblogs.com/chiguozi/p/5860364.html
字符集对比 字符集名称 字符集范围 编码格式 备注 ASCII 英文或其他西欧语言 单字节 GB2312 汉字 双字节 GBK 更多汉字（21886个汉字和图形符号） 双字节 完全向下兼容GB2312 GB18030 支持简体中文、繁体中文 藏文、蒙文、维吾尔文等主要的少数民族文字 可变多字节（1、2、4字节） 完全兼容GB2312，基本兼容GBK ASCII American Standard Code for Information Interchange，美国标准信息交换代码
主要用来表示英文或其他西欧语言（在扩展版中）
编码格式 使用7位（1字节，高位是0）表示128种字符：标准（基础）ASCII 码 使用8位表示256种字符：扩展ASCII 码（EASCII），多的一位表示附加的128 个特殊符号字符、外来语字母和图形符号 GB2312 GB2312（或称GB2312-80，80表示1980年发布）为了支持中文的表示，国人发明的。它是中华人民共和国国家标准简体中文字符集。基本满足汉字的使用，但是对于人名、古汉语等方面出现的罕用字和繁体字，GB 2312不能处理，因此后来GBK及GB 18030汉字字符集相继出现以解决这些问题。
分区表示：GB 2312中对所收汉字进行了“分区”处理，每区含有94个汉字／符号。这种表示方式也称为区位码。
01–09区为特殊符号。 16–55区为一级汉字，按拼音排序。 56–87区为二级汉字，按部首／笔画排序。 举例来说，“啊”字是GB 2312之中的第一个汉字，它的区位码就是1601。 10–15区及88–94区则未有编码。</description>
    </item>
    
    <item>
      <title>Linux-文本处理三剑客</title>
      <link>http://pipony.github.io/post/workspace/01-tech/linux/linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/</link>
      <pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/linux/linux-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2/</guid>
      <description>Linux-文本处理三剑客 awk、grep、sed是linux操作文本的三大利器,合称文本三剑客。
但是三者有所侧重点：
awk：功能最强，也是最复杂的。更适合格式化文本，对文本作复杂格式处理 grep：更适合查找、匹配 sed：更适合编辑匹配到的文本 grep grep命令已经在 linux-管道篇 学习过了，这里就略过。
sed sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为**“模式空间”，接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。然后读入下一行，执行下一个循环。如果没有使用诸如“D”的特殊命令，那会在两个循环之间清空模式空间，但不会清空保留空间**。这样不断重复，直到文件末尾。文件内容并没有改变，除非使用重定向存储输出或-i。
参数说明 sed --help Usage: sed [OPTION]... {script-only-if-no-other-script} [input-file]... -n, --quiet, --silent # 只打印匹配的行 suppress automatic printing of pattern space -e script, --expression=script add the script to the commands to be executed -f script-file, --file=script-file # 写入文档中，后接文件名 add the contents of script-file to the commands to be executed --follow-symlinks follow symlinks when processing in place -i[SUFFIX], --in-place[=SUFFIX] # 直接将处理结果写入文件 edit files in place (makes backup if SUFFIX supplied) -c, --copy use copy instead of rename when shuffling files in -i mode -b, --binary does nothing; for compatibility with WIN32/CYGWIN/MSDOS/EMX ( open files in binary mode (CR+LFs are not treated specially)) -l N, --line-length=N specify the desired line-wrap length for the `l&amp;#39; command --posix disable all GNU extensions.</description>
    </item>
    
    <item>
      <title>Mysql修改root密码</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/mysql%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81/</link>
      <pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/mysql%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81/</guid>
      <description>Mysql修改root密码 背景：linux系统，忘记mysql的root密码，该怎么修改root密码？
复制阿里云的在线服务中提出的解决方案👇。亲测ok
如果忘记了MySQL数据库root用户的密码，可以通过修改配置文件，登录时跳过密码，然后在数据库里面修改密码。一般数据库默认的用户为root。
执行如下命令，编辑MySQL数据库的my.cnf配置文件。
vim /etc/my.cnf 说明：my.cnf配置文件的路径以实际环境为准。
在[mysqld]字段下新增如下内容，然后保存退出。
skip-grant-tables 执行如下命令，重启MySQL服务。
/etc/init.d/mysqld restart 说明：MySQL启动脚本路径以实际环境为准。
执行如下命令，登录数据库。
/usr/bin/mysql 说明：MySQL命令路径以实际环境为准。
依次执行如下SQL语句，更新密码。
USE mysql;UPDATE user SET authentication_string = password (&amp;#39;[$Password]&amp;#39;) WHERE User = &amp;#39;root&amp;#39;;flush privileges;quit 说明：[$Password]为新密码，不建议新密码为“123456”，此密码太简单，密码需要满足密码复杂性要求，需要大小写字母和数字组合，最小长度为8位，根据此密码策略，设置密码。
再次编辑/etc/my.cnf配置文件，删除或者注释第2步添加的skip-grant-tables。 执行如下命令，重启MySQL服务。
/etc/init.d/mysqld restart 使用新密码登录数据库，确认能正常登录。
这里有个注意点：
user表中，可能有两个字段表示用户密码的（Password和authentication_string）。根据mysql的版本不同，可能用前者或是后者来存储登陆密码。比如我的mysql版本是：
mysql&amp;gt; select version(); +------------+ | version() | +------------+ | 5.6.50-log | +------------+ 1 row in set (0.00 sec) 最开始我是用上述解决方案中的语句设置authentication_string字段：
UPDATE user SET authentication_string = password (&amp;#39;[$Password]&amp;#39;) WHERE User = &amp;#39;root&amp;#39;; 发现设置完还是登陆不了。后面就试着把Password字段也设置下，才可以使用新密码登陆：</description>
    </item>
    
    <item>
      <title>oracle-&gt;mysql数据迁移数据事项</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/oracle-mysql%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/oracle-mysql%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E4%BA%8B%E9%A1%B9/</guid>
      <description>oracle-&amp;gt;mysql数据迁移数据事项 概述 从oracle数据迁移到mysql前，需要特别关注两者的区别，才能做好相应的转换及评估。
ORACLE&amp;amp;MYSQL主要差异 图片来源： https://www.infoq.cn/article/rc7urvfsmv94jcaw3z2a
MySQL 不支持的功能项 MySQL 没有并行的概念，不支持并行； MySQL 优化器较弱，复杂 SQL 建议拆分简单 SQL； MySQL 对于子查询优化不是很好； MySQL 不支持物化视图、存储过程改造、同义词改造、dblink 需要改造。 迁移原则 参考： https://www.infoq.cn/article/rc7urvfsmv94jcaw3z2a
迁移数据时，请遵循以下准则，其中大部分准则同时适用于一次性加载方法和实时复制方法：
字符集：确保源 Oracle 数据库与目标 MySQL 数据库之间的字符集兼容； 外键：要提升提取速度，请暂时停用目标 MySQL 数据库上的外键限制条件。加载完成后再启用外键限制条件； 索引：与外键类似，目标 MySQL 数据库上的索引可能会显著降低初始加载的速度。确保在初始加载完成之前，在目标数据库上未创建索引； Oracle 序列：MySQL 支持 AUTO_INCREMENT 而不是序列。确保在初始加载期间停用 AUTO_INCREMENT 特性，以避免覆盖 Oracle 的序列生成的值。在初始加载完成后，将 AUTO_INCREMENT 特性添加到主键列； 网络连接：如果您使用的是 GoldenGate TDM，请确保来源环境和目标环境都可以与 GoldenGate TDM 产品建立网络连接，以允许在 Oracle 端捕获数据并在 MySQL 端加载数据。 迁移难点 参考：
https://www.infoq.cn/article/rc7urvfsmv94jcaw3z2a
字符集 对于字符集，需要考虑的问题为迁移过程字段长度匹配情况，迁移后数据是否乱码，以及迁移后字符集转换后空间的问题。
字段长度匹配，空间估算 NULL和空串处理 使用文件导入到 MySQL 时字段中的空值 null 需要使用\N 表示，如果用空字符串表示，那么根据不同的数据类型，MySQL 处理也各异。</description>
    </item>
    
    <item>
      <title>Mysql导入导出</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/mysql%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</link>
      <pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/mysql%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</guid>
      <description>Mysql导入导出 导出 mysqldump (1) 导出完整数据：
mysqldump -u用户名 -p 数据库名 &amp;gt; 数据库名.sql
例如：# /usr/local/mysql/bin/mysqldump -uroot -p abc &amp;gt; abc.sql
(2) 只导出表结构（使用 -d 选项）：
mysqldump -u用户名 -p -d 数据库名 &amp;gt; 数据库名.sql
INTO OUTFILE https://www.modb.pro/db/98539
SELECT * FROM data_tbl --查找数据源，如果是全表所有字段也可以用 TABLE &amp;lt;talbe&amp;gt; INTO OUTFILE &amp;#34;/tmp/data.txt&amp;#34; --数据输出文件 FIELDS TERMINATED BY &amp;#39;,&amp;#39; --字段分隔符 OPTIONALLY ENCLOSED BY &amp;#39;&amp;#34;&amp;#39; --字段引用符 LINES TERMINATED BY &amp;#39;\n&amp;#39; --整条记录分割符 ; 导入 &amp;lt;.sql mysql -u用户名 -p 数据库名 &amp;lt; 数据库名.sql
例如：
# mysql -uroot -p123456 &amp;lt; abc.</description>
    </item>
    
    <item>
      <title>Linux-磁盘管理</title>
      <link>http://pipony.github.io/post/workspace/01-tech/linux/linux-%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/linux/linux-%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/</guid>
      <description>Linux-磁盘管理 参考 https://blog.csdn.net/weixin_52122271/article/details/126242445 的分类法：
磁盘管理命令：
查看使用量：df, du 查看磁盘分区：fdisk, lsblk 磁盘格式化，挂载/卸载 df df(disk free)：查询文件系统的磁盘占用情况。可显示Linux文件系统上的设备名称、总块数、总磁盘空间、已用磁盘空间、可用磁盘空间和挂载点信息。
[root@iZbp15qc4wmx335c268l5mZ home]# df Filesystem 1K-blocks Used Available Use% Mounted on devtmpfs 471568 0 471568 0% /dev tmpfs 482068 8 482060 1% /dev/shm tmpfs 482068 516 481552 1% /run tmpfs 482068 0 482068 0% /sys/fs/cgroup /dev/vda1 41152812 21695184 17553920 56% / # 默认情况下，磁盘空间将以1KB为单位进行显示 后接支持的参数，可通过df --help获取
常见用法： # 与df相比，还显示虚拟文件系统的信息以及所有文件系统磁盘使用情况及其内存使用情况。 [root@iZbp15qc4wmx335c268l5mZ home]# df -a Filesystem 1K-blocks Used Available Use% Mounted on sysfs 0 0 0 - /sys proc 0 0 0 - /proc devtmpfs 471568 0 471568 0% /dev securityfs 0 0 0 - /sys/kernel/security tmpfs 482068 8 482060 1% /dev/shm devpts 0 0 0 - /dev/pts tmpfs 482068 516 481552 1% /run tmpfs 482068 0 482068 0% /sys/fs/cgroup cgroup 0 0 0 - /sys/fs/cgroup/systemd pstore 0 0 0 - /sys/fs/pstore cgroup 0 0 0 - /sys/fs/cgroup/devices cgroup 0 0 0 - /sys/fs/cgroup/cpu,cpuacct cgroup 0 0 0 - /sys/fs/cgroup/net_cls,net_prio cgroup 0 0 0 - /sys/fs/cgroup/memory cgroup 0 0 0 - /sys/fs/cgroup/cpuset cgroup 0 0 0 - /sys/fs/cgroup/blkio cgroup 0 0 0 - /sys/fs/cgroup/pids cgroup 0 0 0 - /sys/fs/cgroup/perf_event cgroup 0 0 0 - /sys/fs/cgroup/freezer cgroup 0 0 0 - /sys/fs/cgroup/hugetlb configfs 0 0 0 - /sys/kernel/config /dev/vda1 41152812 21695332 17553772 56% / systemd-1 - - - - /proc/sys/fs/binfmt_misc mqueue 0 0 0 - /dev/mqueue hugetlbfs 0 0 0 - /dev/hugepages debugfs 0 0 0 - /sys/kernel/debug binfmt_misc 0 0 0 - /proc/sys/fs/binfmt_misc tmpfs 96416 0 96416 0% /run/user/0 # 可读形式展现 [root@iZbp15qc4wmx335c268l5mZ home]# df -h Filesystem Size Used Avail Use% Mounted on devtmpfs 461M 0 461M 0% /dev tmpfs 471M 8.</description>
    </item>
    
    <item>
      <title>编译期常量</title>
      <link>http://pipony.github.io/post/workspace/01-tech/java/%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/java/%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F/</guid>
      <description>编译期常量 先说结论，编译期常量=final+常量
java四个阶段 编辑期 编译期：将.java文件编译为.class文件 加载期：将.class文件加载到内存 并 生成.class类 运行期：通过.class类去创建对象、执行代码 参考：https://www.modb.pro/db/211851
除了第一个阶段我们能直接干预，剩余三个阶段，都是jvm自己执行的。第二阶段是 非人工干预的 第一阶段。在这个阶段就能确定的值，我们就称为**「编译期常量」**。那么即使后面第三阶段和第四阶段不走，对它也没有影响，而类加载就发生在第三阶段，所以: 「编译期常量不会触发类加载」。
编译期常量定义方式 // final定义，且是常量，即为编译期常量。而且，编译期常量不存在赋值语句，只存在初始化语句。 public final int a = 10000; public static final int b = 10000; 反例：
public int a = 10; // 没用final修饰，不是编译期常量 public final int b = System.currentTimeMillis(); // 值不是常量，所以不是编译期常量 编译期常量的表现 编译后的.class文件中，编译期变量被**「ConstantValue」**修饰。
public class Class { public final int a = 10000; public static final int b = 10000; } // 查看编译后... public final int a; descriptor: I flags: (0x0011) ACC_PUBLIC, ACC_FINAL ConstantValue: int 10000 // 有ConstantValue，说明是编译期常量 public static final int b; descriptor: I flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL ConstantValue: int 10000 // 有ConstantValue，说明是编译期常量 此外 被static修饰的是类一级的，非static修饰的是对象一级的。对象一级的要先创建对象才能使用，所以肯定会触发类加载(不管是不是编译期常量)。</description>
    </item>
    
    <item>
      <title>数据库分页查询</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</guid>
      <description>数据库分页查询 数据库分页语句使用limit语法来实现。除了基础的limit用法，还有一些优化的方法。
LIMIT基础用法 SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset
参数1表示偏移量，参数2表示返回记录行的最大数目。
需要注意：初始偏移量是0而不是1。
举例：
SELECT * FROM table LIMIT 5,10; # 检索记录行 6-15 SELECT * FROM table LIMIT 95,-1; # 检索记录行 96-last SELECT * FROM table LIMIT 5; # 检索前 5 个记录行 （LIMIT n 等价于 LIMIT 0,n） select * from table LIMIT 4 offset 9; # 返回从第9行开始的4条记录 （此时第1个参数表示最多返回几行记录，offset后面的第2个参数表示从第4行开始） # 返回第pageNum页,每页条数为numPerPage 条数据的sql语句写法为 select * from table limit (pageNum-1)*numPerPage ,numPerPage # 方法1 select * from table limit numPerPage offset (pageNum-1)*numPerPage # 方法2 优化分页查询方法 由于基础的分页查询方式会从数据库第一条记录开始扫描，所以当LIMIT的offset较大时，查询速度会越来越慢。下面列举一些优化的分页查询方法。</description>
    </item>
    
    <item>
      <title>数据库日志基础</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A5%E5%BF%97%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A5%E5%BF%97%E5%9F%BA%E7%A1%80/</guid>
      <description>数据库日志基础 世上无难事，只要有日志。
本文以Mysql为例，研究支持的日志。
数据库日志类型 记录方式分类：
逻辑日志：可以简单理解为记录的就是sql语句 。 物理日志：mysql 数据最终是保存在数据页中的，物理日志记录的就是数据页变更 。 日志类型分类：
二进制日志（binlog） 错误日志 通用查询日志 慢查询日志 中继日志（relay-log） 数据定义语句日志 其中，后两种是Mysql 8 新增的日志。除二进制日志外，其他日志都是文本文件。
慢查询日志:记录所有执行时间超过long_query_time的所有查询，方便我们对查询进行优化。通用查询日志:记录所有连接的起始时间和终止时间，以及连接发送给数据库服务器的所有指令，对我们复原操作的实际场景、发现问题，甚至是对数据库操作的审计都有很大的帮助。错误日志:记录MysQL服务的启动、运行或停止MysQL服务时出现的问题，方便我们了解服务器的状态，从对服务器进行维护。二进制日志:记录所有更改数据的语句，可以用于主从服务器之间的数据同步，以及服务器遇到故障时数据的无损失恢复。中继日志:用于主从服务器架构中，从服务器用来存放主服务器二进制日志内容的一个中间文件。从服务器通过读取中继日志的内容，来同步主服务器上的操作。数据定义语句日志:记录数据定义语句执行的元数据操作。来自：https://blog.csdn.net/xiaowanziddd/article/details/125963915 此外，还有文章（https://www.cnblogs.com/shengruxiahuaya/p/16602850.html）提到事务日志（重做日志redo log和回滚日志undo log）：
​	binlog日志和回滚日志undo log日志都属于逻辑日志，记录的是sql语句。而redo log 重做日志属于物理日志，记录的是数据页的变更。
默认日志文件名 如果不进行额外指定的话，mysql日志会有默认的存放路径和文件名。
默认存放路径：DATADIR（数据目录）
默认文件名：
二进制日志：hostname-bin.000001（编号依次增加） 错误日志：hostname.err 通用查询日志：hostname-general.log 慢查询日志：hostname.slow.log 中继日志：hostname-relay-bin.000001（编号依次增加） 数据定义语句日志 二进制日志（binlog） 记录所有的DDL语句和DML语句，但不包括查询语句。binlog 用于记录数据库执行的写入性操作(不包括查询)信息，以二进制的形式保存在磁盘中。binlog 是通过追加的方式进行写入的，可以通过max_binlog_size 参数设置每个 binlog文件的大小，当文件大小达到给定值之后，会生成新的文件来保存日志。
使用场景：
- 主从复制：在 Master 端开启 binlog ，然后将 binlog发送到各个 Slave 端， Slave 端重放 binlog 从而达到主从数据一致。- 数据恢复：通过使用 mysqlbinlog 工具来恢复数据。 二进制日志格式：</description>
    </item>
    
    <item>
      <title>分区表</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/%E5%88%86%E5%8C%BA%E8%A1%A8/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/%E5%88%86%E5%8C%BA%E8%A1%A8/</guid>
      <description>分区表 基本概念 分区、分表、分库、分片
参考链接：
https://blog.csdn.net/wqaiwsj/article/details/124684356
https://www.cnblogs.com/qianmojie/p/16326975.html
分区：将数据从物理上分成若干个小表存储，实际上还是一张表。为了在特定的SQL操作中减少数据读写的总量以缩减响应时间，提升查询效率。
分表：把一张表按一定的规则分解成N个具有独立存储空间的实体表。
分库：多表放在不同的服务器中，突破单节点数据库服务器的I/O能力限制。
分片：在分布式存储系统中，数据需要分散存储在多台设备上，数据分片（Sharding）就是用来确定数据在多台存储设备上分布的技术
常见分区类型 以mysql为例
range分区：给定连续区间 list分区：匹配一个离散值集合 hash分区：基于用户定义的表达式（MySQL 中有效的、产生非负整数值的任何表达式）的返回值来进行选择的分区 key分区：根据MySQL数据库提供的哈希函数来进行分区。 另外，还需要关注自动分区表（mysql不能自然支持，其他数据库可能支持，如gaussdb）
分区表定义 参考：https://www.cnblogs.com/dream98/p/10620877.html
RANGE分区 CREATE TABLE employees ( id INT NOT NULL, fname VARCHAR(30), lname VARCHAR(30), hired DATE NOT NULL DEFAULT &amp;#39;1970-01-01&amp;#39;, separated DATE NOT NULL DEFAULT &amp;#39;9999-12-31&amp;#39;, job_code INT NOT NULL, store_id INT NOT NULL ) partition BY RANGE (store_id) ( partition p0 VALUES LESS THAN (6), partition p1 VALUES LESS THAN (11), partition p2 VALUES LESS THAN (16), partition p3 VALUES LESS THAN (21) ); 如果增加了一个编号为第21的商店，将会发生什么呢？在这种方案下，由于没有规则把store_id大于20的商店包含在内，服务器将不知道把该行保存在何处，将会导致错误。 要避免这种错误，可以将最后一行规则换成：</description>
    </item>
    
    <item>
      <title>BenchmarkSQL性能测试</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/benchmarksql%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/benchmarksql%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</guid>
      <description>BenchmarkSQL性能测试 何为BenchmarkSQL BenchmarkSQL是一款经典的开源数据库测试工具，其包含 TPCC 测试脚本，支持MySQL、Oracle 、EnterpriseDB、PostgreSQL以及SQL Server 等数据库的性能压力测试。模拟多种事务处理：新订单、支付操作、订单状态查询、发货、库存状态查询等，从而获得最终的压测值。
安装及压测大致步骤 总结在linux安装BenchmarkSQL工具，并使用的步骤。压测工具安装的主机是单独的，即不是放在待压测的数据库服务器上，前者通过jdbc连接到后者进行压测。
将BenchmarkSQL安装包传到主机上，并解压 额外需要安装ant和jdk 使用ant编译BenchmarkSQL 在待压测数据库中，创建压测用户 修改BenchmarkSQL配置文件props.xxx，将连接驱动、地址、用户配置正确。并设置所需的压测参数 执行压测数据导入命令 sh runDatabaseBuild.sh props.xxx 执行正式压测命令 ./runBenchmark.sh props.xxx。运行后可以看到实时的tpmC数值，运行结束后会显示平均的tpmC数值。 压测结果生成 执行删除压测数据命令 ./runDatabaseDestroy.sh props.xxx props配置文件解析 可参考：
https://blog.csdn.net/weixin_47308871/article/details/123872130
http://t.zoukankan.com/DFX339-p-13071848.html
https://www.cnblogs.com/klb561/p/10513528.html
Warehouses 代表仓库数,框中的数字表示该表将存放的记录条数，仓库数的调整在测试中能够体现数据库所能支持的数据规模的能力。每个 Warehouse 的数据量，其大小约为 76823.04KB，可以有小量的变化，因为测试过程中将会插入或删除现有记录。可以根据每个Warehouse的数据量，计算测试过程中的数据总量。计算公式为：数据总量（KB）≈ Warehouse个数*76823.04KB以10个Warehouse的数据量为例计算其数据总量大小约为：768230.4KBloadWorkers=10 //用于在数据库中初始化数据的加载进程数量，默认为4，实际使用过程中可以根据实际情况调整，加载速度会随worker数量的增加而有所提升terminals=10 //终端数，即并发客户端数量，通常设置为CPU线程总数的2～6倍runTxnsPerTerminal=10 //每个终端（terminal）运行的固定事务数量，例如：如果该值设置为10，意味着每个terminal运行10个事务，如果有32个终端，那整体运行320个事务后，测试结束。该参数配置为非0值时，下面的runMins参数必须设置为0runMins=0 //要测试的整体时间，单位为分钟，如果runMins设置为60，那么测试持续1小时候结束。该值设置为非0值时，runTxnsPerTerminal参数必须设置为0。这两个参数不能同时设置为正整数，如果设置其中一个，另一个必须为0，主要区别是runMins定义时间长度来控制测试时间；runTxnsPerTerminal定义事务总数来控制时间。 测试指标 流量指标（Throughput,简称tpmC) 流量指标(Throughput,简称tpmC)：按照TPC组织的定义，流量指标描述了系统在执行支付操作、订单状态查询、发货和库存状态查询这4种交易的同时，每分钟可以处理多少个新订单交易。所有交易的响应时间必须满 足TPC-C测试规范的要求，且各种交易数量所占的比例也应该满足TPC-C测试规范的要求。在这种情况下，流量指标值越大说明系统的联机事务处理能力越高。
性价比（Price/Performance,简称Price/tpmC)。 性价比（Price/Performance,简称Price/tpmc)：即测试系统的整体价格与流量指标的比值，在获得相同的tpmC值的情况下，价格越低越好。
参考链接 https://zhuanlan.zhihu.com/p/396651167
https://www.modb.pro/db/137349
https://blog.csdn.net/ActionTech/article/details/123985424
https://www.cnblogs.com/klb561/p/10513528.html
https://wade-test.readthedocs.io/zh/latest/BenchmarkSQL5.0%20%E6%95%B0%E6%8D%AE%E5%BA%93%20TPC-C%20%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%20-%20%E7%91%BE%E7%86%99%E7%9A%84%E5%8D%9A%E5%AE%A2%20JL%20Blog/</description>
    </item>
    
    <item>
      <title>Linux-磁盘扩容</title>
      <link>http://pipony.github.io/post/workspace/01-tech/linux/linux-%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/</link>
      <pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/linux/linux-%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/</guid>
      <description>Linux-磁盘扩容 看b站：https://www.bilibili.com/video/BV1NK411w7DL/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=388c468b983bcf7b800d0e7cfb9fc719 的教学视频笔记
⚠️此操作只适用于扩容已有目录size，不涉及挂载等前置操作。
基础概念 lv (logical volume)：逻辑卷 vg (volume group)：卷组 pv (physical volume)：物理卷 pe (physical extent)：物理区域 目录是挂载在卷组vg上的，可以通过在vg中添加lv，扩大vg的容量，从而达到该目录的lvm磁盘扩容效果。
扩容基本操作 查看当前挂载点 df -h 显示当前的lv lvdisplay 显示当前的vg vgdisplay 显示当前的pv pvdisplay 查看磁盘内容 fdisk -lfdisk -l | grep &amp;#39;/dev&amp;#39; 目前有sda和sdb两块硬盘（其中sdb是新增硬盘，等待将其扩容到vg）
创建新分区，格式化 fdisk /dev/sdbmkfs -t ext4 /dev/sdb1 创建pv pvcreate /dev/sdb1pvscan #查看所有的pv情况 扩容vg vgextend ubuntu-vg /dev/sdb1 #ubuntu-vg为待扩容的vg名称pvscan #查看扩容结果vgdisplay #查看扩容结果 扩容lv lvdisplay #查看要扩容的lv path和lv namelvextend -L +10G /dev/ubuntu-vg/ubuntu-lv #扩容10G resize2fs /dev/ubuntu-vg/ubuntu-lvdf -h #查看扩容结果 刚才的操作是将vg中Free PE的10G移到可分配的Alloc PE中，从上图看已操作成功，即完成了扩容（真正可使用的vg空间+10G）。现在要将所有的Free PE扩容到Alloc PE中，可采用：</description>
    </item>
    
    <item>
      <title>Java基础之Calendar日历类</title>
      <link>http://pipony.github.io/post/workspace/01-tech/java/java%E5%9F%BA%E7%A1%80%E4%B9%8Bcalendar%E6%97%A5%E5%8E%86%E7%B1%BB/</link>
      <pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/java/java%E5%9F%BA%E7%A1%80%E4%B9%8Bcalendar%E6%97%A5%E5%8E%86%E7%B1%BB/</guid>
      <description>Java基础之Calendar日历类 Calendar类用于完成日期和时间字段的操作，它可以通过特定的方法设置和读取日期的特定部分，比如年、月、日、时、分和秒等。
定义方法 Calendar类是一个抽象类，不可以被实例化。
因此，需要使用静态方法getInstance()来得到一个Calendar对象
Calendar calendar = Calendar.getInstance(); // 获取当前日期 获取方法 方法1 可获取字段包括：年、月、日、时、分、秒，需要使用Calendar类中定义的常量值来表示，如Calendar.YEAR用于表示年份。
Calendar calendar = Calendar.getInstance(); int year = calendar.get(Calendar.YEAR); int month = calendar.get(Calendar.MONTH); int day = calendar.get(Calendar.DATE); // DATE表示日 int hour = calendar.get(Calendar.HOUR); int minute = calendar.get(Calendar.MINUTE); int second = calendar.get(Calendar.SECOND); System.out.println(year+&amp;#34;年&amp;#34;+(month+1)+&amp;#34;月&amp;#34;+day+&amp;#34;日&amp;#34;+hour+&amp;#34;时&amp;#34;+minute+&amp;#34;分&amp;#34;+second+&amp;#34;秒&amp;#34;); /****执行结果******/ 2022年10月25日7时4分37秒 需要特别注意：
在使用Calendar.MONTH字段时，月份的起始值是从0开始的，而不是从1开始，因此要获取当前的月份需要在Calendar.MONTH的基础上加1。
方法2 使用Calendar的getTime()方法，getTime()方法会返回一个表示Calendar时间值的Date对象
Calendar calendar = Calendar.getInstance(); System.out.println(calendar.getTime()); /******执行结果*******/ Tue Oct 25 07:10:22 CST 2022 设置方法 使用set字段进行设置，有以下三种格式：
方法声明 功能描述 void set(int field,int value) 为指定日历字段设置指定值 void set(int year,int month,int date) 设置Calendar对象的年、月、日三个字段的值 void set(int year.</description>
    </item>
    
    <item>
      <title>Linux-系统信息查看命令</title>
      <link>http://pipony.github.io/post/workspace/01-tech/linux/linux-%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/linux/linux-%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4/</guid>
      <description>Linux-系统信息查看命令 整理一些关于linux的系统信息查看命令，无逻辑，纯自用。
查看系统版本 1、查看发行版本（适用所有linux系统）
lsb_release -a
2、查看Linux内核版本
uname -a 和 cat /proc/version
[cindy@iZbp15qc4wmx335c268l5mZ ~]$ lsb_release -a LSB Version: :core-4.1-amd64:core-4.1-noarch Distributor ID: CentOS Description: CentOS Linux release 7.8.2003 (Core) Release: 7.8.2003 Codename: Core [cindy@iZbp15qc4wmx335c268l5mZ ~]$ uname -a Linux iZbp15qc4wmx335c268l5mZ 3.10.0-1127.19.1.el7.x86_64 #1 SMP Tue Aug 25 17:23:54 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux [cindy@iZbp15qc4wmx335c268l5mZ ~]$ cat /proc/version Linux version 3.10.0-1127.19.1.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) ) #1 SMP Tue Aug 25 17:23:54 UTC 2020 参考链接</description>
    </item>
    
    <item>
      <title>Linux-防火墙firewall</title>
      <link>http://pipony.github.io/post/workspace/01-tech/linux/linux-%E9%98%B2%E7%81%AB%E5%A2%99firewall/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/linux/linux-%E9%98%B2%E7%81%AB%E5%A2%99firewall/</guid>
      <description>Linux-防火墙firewall Linux中有两种防火墙软件，ConterOS7.0以上使用的是firewall，ConterOS7.0以下使用的是iptables。ConterOS7.0以上默认使用firewalld防火墙，如果想换回iptables防火墙，可关闭firewalld并安装iptables。
由于目前我的云主机是ConterOS7.0+，所以就先只学习firewall。
基本命令 查看防火墙状态和规则 查看防火墙状态：
systemctl status firewalld
[cindy@iZbp15qc4wmx335c268l5mZ ~]$ systemctl status firewalld ● firewalld.service - firewalld - dynamic firewall daemon Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2022-04-28 21:54:51 CST; 4 months 21 days ago Docs: man:firewalld(1) Main PID: 560 (firewalld) CGroup: /system.slice/firewalld.service └─560 /usr/bin/python2 -Es /usr/sbin/firewalld --nofork --nopid Warning: Journal has been rotated since unit was started. Log output is incomplete or unavailable.</description>
    </item>
    
    <item>
      <title>Maven之三：坐标、依赖范围、依赖冲突</title>
      <link>http://pipony.github.io/post/workspace/01-tech/java/maven%E4%B9%8B%E4%B8%89%E5%9D%90%E6%A0%87%E4%BE%9D%E8%B5%96%E8%8C%83%E5%9B%B4%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/java/maven%E4%B9%8B%E4%B8%89%E5%9D%90%E6%A0%87%E4%BE%9D%E8%B5%96%E8%8C%83%E5%9B%B4%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/</guid>
      <description>Maven之三：坐标、依赖范围、依赖冲突 学习网站：http://mvnbook.com/index.html
Maven构件 构件：在Maven中，任何项目输出都可成为构件。
构件标识（唯一标识，也称为唯一坐标） 除了各种依赖jar包，我们自己开发的项目，也是要通过坐标进行唯一标识的，这样才能才其它项目中进行依赖引用。
坐标组成：
groupId：当前Maven构件隶属的组织名。groupId一般分为多段，通常情况下，第一段为域，第二段为公司名称。域又分为 org、com、cn 等，其中 org 为非营利组织，com 为商业组织，cn 表示中国。以 apache 开源社区的 tomcat 项目为例，这个项目的 groupId 是 org.apache，它的域是org（因为tomcat是非营利项目），公司名称是apache，artifactId是tomcat。如果你的公司是mycom，有一个项目为myapp，那么groupId就应该是com.mycom.myapp。groupId的表示方式与Java包名的表示方式类似。(必须) artifactId：项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。(必须) version：当前版本。(必须) packaging：打包方式，比如 jar，war&amp;hellip;，默认是jar (可选) classifier：classifier通常用于区分从同一POM构建的具有不同内容的构件。它是可选的，它可以是任意的字符串，附加在版本号之后。classfier是不能直接定义的，需要结合插件使用。 标识和jar包名的对应关系（顺序拼接）：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;net.sf.json-lib&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;json-lib&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.2&amp;lt;/version&amp;gt; &amp;lt;classifier&amp;gt;jdk15&amp;lt;/classifier&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- 对应的jar包名: json-lib-2.2.2-jdk15.jar --&amp;gt; classifier标识使用场景 区分不同JDK版本所生成的jar包 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;net.sf.json-lib&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;json-lib&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.2&amp;lt;/version&amp;gt; &amp;lt;classifier&amp;gt;jdk15&amp;lt;/classifier&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;net.sf.json-lib&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;json-lib&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.2&amp;lt;/version&amp;gt; &amp;lt;classifier&amp;gt;jdk13&amp;lt;/classifier&amp;gt; &amp;lt;/dependency&amp;gt; 以上配置信息实际上对应的 jar 包是 json-lib-2.2.2-jdk15.jar 和 json-lib-2.2.2-jdk13.jar。
区分项目的不同组成部分，例如，源代码、javadoc、类文件等 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;net.sf.json-lib&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;json-lib&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.2&amp;lt;/version&amp;gt; &amp;lt;classifier&amp;gt;jdk15-javadoc&amp;lt;/classifier&amp;gt; &amp;lt;/dependency&amp;gt; 以上配置信息对应的是 json-lib-2.2.2-jdk15-javadoc.jar。
注意&amp;lt;classifier&amp;gt;的位置：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;net.sf.json-lib&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;json-lib&amp;lt;/artifactId&amp;gt; &amp;lt;classifier&amp;gt;jdk15-javadoc&amp;lt;/classifier&amp;gt; &amp;lt;version&amp;gt;2.</description>
    </item>
    
    <item>
      <title>小程序之三：官方开发文档学习（指南篇）</title>
      <link>http://pipony.github.io/post/workspace/01-tech/miniapp/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E4%B8%89%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%98%E6%96%B9%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/miniapp/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E4%B8%89%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%98%E6%96%B9%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0/</guid>
      <description>小程序之三：官方开发文档学习（指南篇） 学习教程：https://developers.weixin.qq.com/miniprogram/dev/framework/
知道了小程序大概是咋回事之后，是时候学习下小程序的基础语法规则了。微信官方有提供教程，故本文通过第一部分指南篇进行学习。</description>
    </item>
    
    <item>
      <title>小程序之二：HelloWorld</title>
      <link>http://pipony.github.io/post/workspace/01-tech/miniapp/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E4%BA%8Chelloworld/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/miniapp/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E4%BA%8Chelloworld/</guid>
      <description>小程序之二：HelloWorld 学习教程：https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-one.html
跟着阮一峰老师的教程写个最简单的hello world：
1、新建项目目录wechat-miniprogram-demo，进入项目目录
2、在项目目录中，新建脚本app.js。这个脚本用于对整个小程序进行初始化。
App({}); 上面代码中，App()由小程序原生提供，它是一个函数，表示新建一个小程序实例。它的参数是一个配置对象，用于设置小程序实例的行为属性。这个例子不需要任何配置，所以使用空对象即可。
3、在项目目录中，新建配置文件app.json，记录项目的一些静态配置，采用 JSON 格式。至少必须有一个pages属性，指明小程序包含哪些页面。
{ &amp;#34;pages&amp;#34;: [ &amp;#34;pages/home/home&amp;#34; ] } 小程序会加载页面目录pages/home里面的home.js文件，.js后缀名可以省略，所以完整的加载路径为pages/home/home。home.js这个脚本的文件名也可以随便起，但是习惯上跟页面目录同名。
除了pages属性，还可以加上window属性，定义最上方的导航栏的属性，如：
{ &amp;#34;pages&amp;#34;: [ &amp;#34;pages/home/home&amp;#34; ], &amp;#34;window&amp;#34;: { &amp;#34;navigationBarBackgroundColor&amp;#34;: &amp;#34;#ff0000&amp;#34;, &amp;#34;navigationBarTextStyle&amp;#34;: &amp;#34;white&amp;#34;, &amp;#34;navigationBarTitleText&amp;#34;: &amp;#34;小程序 Demo&amp;#34; } } 比如还有tabBar属性，定制底部选项卡的属性。
4、新建脚本pages/home/home.js，内容如下：
Page({}); 上面代码中，Page()由小程序原生提供，它是一个函数，用于初始化一个页面实例。它的参数是一个配置对象，用于设置当前页面的行为属性。这里是一个空对象，表示不设置任何属性。
5、新建脚本pages/home/home.wxml，用于描述小程序的页面。
hello world 6、一个最简单的项目就完成啦。现在导入小程序开发工具看看。
也可以点击“预览”或“真机调试”，扫描二维码在手机上查看效果
小程序项目基础结构 |- app.json |- app.js |- pages |- home |- home.wxml |- home.js 这个结构分成两层：描述整体程序的顶层 app 脚本，以及描述各个页面的 page 脚本。</description>
    </item>
    
    <item>
      <title>Maven之一：基础</title>
      <link>http://pipony.github.io/post/workspace/01-tech/java/maven%E4%B9%8B%E4%B8%80%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/java/maven%E4%B9%8B%E4%B8%80%E5%9F%BA%E7%A1%80/</guid>
      <description>Maven之一：基础 学习网站：http://mvnbook.com/index.html
简介 Maven英文：专家、内行
Maven：项目管理工具。可以对 Java 项目（后也可被应用于其他语言的管理）进行自动化的构建和依赖管理。
项目构建：即软件项目生产的整个过程 文档和代码的生成 代码编译、测试、打包 打包好的代码进行分发和部署 依赖管理 我们需要做的就是在 POM 文件里指定依赖 Jar 包的名称、版本号，Maven 会自动下载，并递归地去下载依赖的进一步依赖 快照依赖：使用快照依赖可以确保本地仓库中的每一个 Build 版本都是最新的 组成：
项目对象模型 POM(project object model) 项目生命周期 project lifecycle 依赖管理系统 dependency management system 各种插件 官网地址是：https://maven.apache.org/index.html
下载和安装 官网下载地址是：https://maven.apache.org/download.cgi
Mac安装maven步骤：
参考链接：https://blog.csdn.net/m0_67400973/article/details/123656632
1、下载Binary zip archive（如目前的最新版 apache-maven-3.8.6-bin.zip），解压并重命名文件夹为maven（或者外面再套一层maven文件夹，不需要修改原有的文件夹名称）
2、配置环境变量
编辑文件 .bash_profile：
vim ~/.bash_profile # 添加以下内容 export M2_HOME=/Users/huangxindi/study/maven #这里是你maven目录的路径 export PATH=$PATH:$M2_HOME/bin 编辑文件 .zshrc
vim ~/.zshrc # 添加以下内容 export M2_HOME=/Users/huangxindi/study/maven #这里是你maven目录的路径 export PATH=$PATH:$M2_HOME/bin 3、使修改立即生效
source ~/.bash_profile source ~/.</description>
    </item>
    
    <item>
      <title>Maven之二：创建Maven项目</title>
      <link>http://pipony.github.io/post/workspace/01-tech/java/maven%E4%B9%8B%E4%BA%8C%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/java/maven%E4%B9%8B%E4%BA%8C%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE/</guid>
      <description>Maven之二：创建Maven项目 学习网站：http://mvnbook.com/index.html
Maven项目创建 约定标准目录结构 目录 作用 ${basedir} 存放 pom.xml 和所有子目录 ${basedir}/src/main/java 项目的 java 源代码所在的目录 ${basedir}/src/main/resources 项目的资源文件所在的目录，例如：propert文件 ${basedir}/src/test/java 测试代码所在的目录，例如：JUnit 代码 ${basedir}/src/test/resources 测试相关的资源文件所在的目录 ${basedir}/src/main/webapp/WEB-INF web 应用文件目录，web 项目的信息，比如存放 web.xml、本地图片、jsp 视图页面 ${basedir}/target 打包输出目录 ${basedir}/target/classes 编译输出目录 ${basedir}/target/test-classes 测试编译输出目录 IDEA创建Maven项目 可参考：https://blog.csdn.net/hgnuxc_1993/article/details/125427590
注意点：
需要进入设置，编辑maven配置为自己下载的maven路径 修改自己的/conf/setting.xml文件，将maven源改为阿里云，不然后面下载依赖会慢
可参考 https://zhuanlan.zhihu.com/p/434179938 解决下一次打开IDEA，之前设置的maven路径参数被复原的问题（即，要设置preferences for new projects）
可参考 https://blog.csdn.net/m0_49286452/article/details/124729379 创建maven项目
点击创建后，需要一定时间的构建。构建结束（BUILD SUCCESS），查看目录是否正常
相比标准目录结构，自动创建后缺少的/main/resources和/test/resources就自己手动创建吧。</description>
    </item>
    
    <item>
      <title>小程序之一：开始</title>
      <link>http://pipony.github.io/post/workspace/01-tech/miniapp/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E4%B8%80%E5%BC%80%E5%A7%8B/</link>
      <pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/miniapp/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E4%B8%80%E5%BC%80%E5%A7%8B/</guid>
      <description>小程序之一：开始 开发个小程序玩玩。。虽然没想好用来做啥，但是就想拥有一个自己的小程序，搭起来再说吧！
推荐新手先阅读阮一峰老师的微信小程序入门教程：
https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-one.html
https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-two.html
https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-three.html
http://www.ruanyifeng.com/blog/2020/11/wechat-miniprogram-tutorial-part-four.html
申请 https://developers.weixin.qq.com/community/business/doc/000200772f81508894e94ec965180d
申请了个人主体的认证（个人会有些限制，比如无法使用某些接口），将自己设为管理员，填写小程序名字和头像，设置域名，获取开发者ID和密钥（后面会用到）&amp;hellip;
下载开发工具 下载官方提供的小程序开发工具（https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html）。
这个工具是必需的，因为只有它才能运行和调试小程序源码。
很可爱的图标👆
软件有两种开发模式：
云开发：会提供完整的项目脚手架 导入项目：从零开始导入自己写的项目（推荐这个） 知识储备 首先，WHAT IS 小程序？
小程序可以视为只能用微信打开和浏览的网站。 小程序和网页的技术模型是一样的，用到的 JavaScript 语言和 CSS 样式也是一样的，只是网页的 HTML 标签被稍微修改成了 WXML 标签。所以，小程序页面本质上就是网页。
小程序的特殊之处在于，虽然是网页，但是它不支持浏览器，所有浏览器的 API 都不能使用，只能用微信提供的 API。这也是为什么小程序只能用微信打开的原因，因为底层全变了。
—— https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-one.html
所以，目前看来，基础的知识储备就是JS和CSS，再加上微信提供的语法规则，就可以开发一个简易版的小程序了。</description>
    </item>
    
    <item>
      <title>数据库测试扫盲篇</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%8B%E8%AF%95%E6%89%AB%E7%9B%B2%E7%AF%87/</link>
      <pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B5%8B%E8%AF%95%E6%89%AB%E7%9B%B2%E7%AF%87/</guid>
      <description>数据库测试扫盲篇 最近参与数据库POC测试，鉴于对数据库还不够了解，决定先以一些测试案例为蓝本，自我扫盲下。
表空间以及表空间管理 1、什么是表空间（TABLESPACE）
表空间是一种存储结构，它包含表、索引、大对象和长型数据。
以ORACLE为例，一个ORACLE数据库能够有一个或多个表空间，而一个表空间则对应着一个或多个物理的数据库文件，但一个数据库文件只能与一个表空间相联系。表空间是ORACLE数据库恢复的最小单位，容纳着许多数据库实体，如表、视图、索引、聚簇、回退段和临时段等。
2、什么是表空间管理
表空间管理包括：如对表空间的创建、修改、删除、扩容
参考链接
https://www.ibm.com/docs/zh/db2/10.5?topic=databases-table-spaces
https://www.modb.pro/db/335060
https://www.cnblogs.com/kerrycode/p/3418694.html
https://blog.51cto.com/u_14056283/3076029
数据库对象 一个数据库对象是 数据库中用于存储或引用数据的任何已定义对象。我们从 create 命令所做的任何事情都称为数据库对象。它可以用来保存和操作数据。
主要的数据库对象包含：触发器（Trigger）、表（Table）、视图（View）、存储过程（StoredProcedure）、索引（Index）、缺省值（Default）、图表（Diagram）、用户（User）、规则（Rule）等几类
参考链接
https://www.jianshu.com/p/ec63e6937e7c
https://zh-cn.myubi.tv/21731-what-is-a-database-object
数据库约束 概念：数据库约束是防止非法记录的规则，约束保存在数据字典(data dictionary)中， 约束可以被定义在列级或者表级。
类型：总的来说有五种：唯一性和主键约束、外键约束、检查约束、空值约束、默认值约束。
有五大关键词，UNIQUE和Primary Key, Foreign Key, CHECK, NOT NULL, DEFAULT
参考链接
https://developer.aliyun.com/article/91298
https://www.cnblogs.com/netsql/archive/2010/05/06/1729162.html
视图 视图是从一个或几个基本表（或视图）导出的表。 它与基本表不同，是一个虚表。数据库只存放视图的定义，而不存放视图对应的数据，这些数据仍存放在原来的基本表中。 所以基本表中的数据发生变化，从视图中查询出的数据也就随之改变了。 视图只供查询，数据不可更改。
参考链接
https://zhuanlan.zhihu.com/p/372569011
触发器(trigger) 触发器是与表有关的数据库对象，指的是在insert\update\delete操作之前或者之后，能够触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以使得应用在数据库端确保数据的完整性以及日志记录，数据校验等操作。并且可以使用OLD和NEW来引用触发器中发生变化的记录内容。
触发器的分类：
DML触发器：DML（Data Manipulation Language）触发器是当数据库服务器中发生数据操作语言事件时执行的存储过程。DML触发器又分为两类：After触发器和Instead Of触发器
DDL触发器：DDL触发器是在响应数据定义语言（Data Definition Language）事件时执行的存储过程。DDL触发器一般用于执行数据库中管理任务。如审核和规范数据库操作、防止数据库表结构被修改等。
例如：
create trigger trigger_name before/after insert/update/delete on table_name [for each row] --- 行级触发器 begin trigger_stmt; end; 参考链接</description>
    </item>
    
    <item>
      <title>win10常用快捷键</title>
      <link>http://pipony.github.io/post/workspace/01-tech/other/win10%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/other/win10%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>win10常用快捷键 【个人向】由于工作机是win10，故整理一些个人比较常用快捷键。还有很多好用的快捷键等待学习～～
Win+* Win+L 快速锁屏 Win+D 显示桌面 Win+I 打开设置界面 Win+E 打开我的电脑 Win+M 最小化所有窗口 Win+Shift+M 还原所有窗口 Win+R 打开运行窗口 Win+Tab 多任务视图 Win+上/下 缩放界面 Win+左/右 界面左/右停靠（分屏） Win+1/2/3/&amp;hellip; 打开任务栏的第1/2/3/&amp;hellip;个软件界面 Win+V 显示历史复制内容并选择粘贴 Win+W 调出工作区，包括白板等功能 Win+Tab 创建虚拟桌面 Win+Ctrl+←\→，快速切换虚拟桌面\ Win+“+/-” 放大/缩小屏幕 Ctrl+* Ctrl+Shift+Esc 打开任务管理器 Ctrl+Shift+N 新建文件夹并命名 Ctrl+W 关闭当前界面 Ctrl+Y 恢复上一次的撤销（Ctrl+Z） Ctrl+Shift+T 恢复被关闭的网页 Ctrl+Shift+F 输入法切换为繁体 Alt+* Alt+Tab 多窗口快速切换 Alt+Enter(或鼠标双击) 快速查看文件属性 Alt+Space+C 关闭窗口 Alt+Space+N 最小化窗口 Alt+Space+X 最大化窗口 Shift+* Shift+Delete 永久删除文件 其他 Backspace 资源管理器中是返回上一个打开的目录 快捷键设置技巧 一键打开某软件 右键软件（需要先创建为快捷方式） - 属性 - 快捷方式 - 修改快捷键值即可 （默认是Ctrl+Alt+自定义格式）</description>
    </item>
    
    <item>
      <title>Linux-安装Oracle</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/linux-%E5%AE%89%E8%A3%85oracle/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/linux-%E5%AE%89%E8%A3%85oracle/</guid>
      <description>Linux-安装Oracle数据库 安装【失败】，可能因为我的服务器空间不足。。。罢了，先放着吧
背景：我的阿里云linux服务器（CentOS 7.8 64位）之前在宝塔已懒人安装了mysql，现需要在服务器上学习Oracle，所以先记录安装过程（静默安装）。
正式安装之前，可以先检测下是否已有安装Oracle程序。若已有安装oracle，应能看到oracle进程，且一般都会有oracle用户。我在本机上验证如下，是没有安装过的，
[cindy@iZbp15qc4wmx335c268l5mZ ~]$ ps -ef | grep oracle cindy 26709 26624 0 20:22 pts/0 00:00:00 grep --color=auto oracle [cindy@iZbp15qc4wmx335c268l5mZ ~]$ id oracle id: oracle: no such user [cindy@iZbp15qc4wmx335c268l5mZ ~]$ rpm -qa | grep oracle # 查看以rpm包安装的软件列表 [cindy@iZbp15qc4wmx335c268l5mZ ~]$ yum list installed | grep oracle # 查看以yum安装的软件列表 步骤概览 参考 http://www.javashuo.com/article/p-sbcnrnqx-gr.html
安装swap分区 安装oracle依赖包 建立用户/用户组 在外面下载oralce包并传到linux oracle安装 安装swap分区 oracle安装需要swap分区，所以先检查下是否已有swap分区。
[root@iZbp15qc4wmx335c268l5mZ ~]# free total used free shared buff/cache available Mem: 964136 425288 172940 304 365908 366360 Swap: 1049596 303616 745980 [root@iZbp15qc4wmx335c268l5mZ ~]# cat /etc/fstab # # /etc/fstab # Created by anaconda on Mon Sep 14 07:14:22 2020 # # Accessible filesystems, by reference, are maintained under &amp;#39;/dev/disk&amp;#39; # See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info # UUID=9f2d3e15-a78a-4f3d-8385-0165b4b67864 / ext4 defaults 1 1 /www/swap swap swap defaults 0 0 看起来是已有的，如果没有，可参考链接的方式创建。</description>
    </item>
    
    <item>
      <title>Oracle-实现事务提交和回滚</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/oracle-%E5%AE%9E%E7%8E%B0%E4%BA%8B%E5%8A%A1%E6%8F%90%E4%BA%A4%E5%92%8C%E5%9B%9E%E6%BB%9A/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/oracle-%E5%AE%9E%E7%8E%B0%E4%BA%8B%E5%8A%A1%E6%8F%90%E4%BA%A4%E5%92%8C%E5%9B%9E%E6%BB%9A/</guid>
      <description>Oracle-实现事务提交和回滚 背景：一直以来用sqlplus /执行多条sql时，某条sql失败后无法回滚前面的sql，并会继续执行下面的sql。即，如果 sqlplus 中遇到了一个 sql 或者 pl/ssql 错误, 一般会报告这个错误然后继续处理。在交互模式下, 这种处理是很理想的, 但是如果运行的是一个脚本,我们一般不希望失败了还继续执行 。这可太不科学了！经过高人指点，可以用一条命令来实现失败回滚功能。故在此学习和记录下。
失败回滚命令 WHENEVER SQLERROR官网介绍： https://docs.oracle.com/en/database/oracle/oracle-database/19/sqpug/WHENEVER-SQLERROR.html#GUID-66C1C12C-5E95-4440-A37B-7CCE7E33491C
常见用法 WHENEVER SQLERROR {EXIT [SUCCESS | FAILURE | WARNING | n | variable | :BindVariable] [COMMIT | ROLLBACK] | CONTINUE [COMMIT | ROLLBACK | NONE]} 出现错误后退出sql执行 SQL&amp;gt; WHENEVER SQLERROR EXIT SQL.SQLCODE 出现错误后先回滚【还没提交的变化】再退出sql执行 SQL&amp;gt; WHENEVER SQLERROR EXIT SQL.SQLCODE ROLLBACK ---回滚退出，并返回错误码SQL.SQLCODE or SQL&amp;gt; WHENEVER SQLERROR SQL.SQLCODE EXIT ROLLBACK 失败不回滚命令 如果要实现失败不回滚（当发生错误时，对之前执行的语句进行提交，并保留SQL*Plus）：
参考 https://juejin.cn/post/7075307770173456392
whenever sqlerror continue commit spool命令 此外，可以先认识下spool命令。</description>
    </item>
    
    <item>
      <title>认识Jar包</title>
      <link>http://pipony.github.io/post/workspace/01-tech/java/%E8%AE%A4%E8%AF%86jar%E5%8C%85/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/java/%E8%AE%A4%E8%AF%86jar%E5%8C%85/</guid>
      <description>认识Jar包 概念 Jar：Java Archive File
基于zip文件格式将许多文件合成一个压缩文件.jar，区别是比zip多了一个包含了一个 META-INF/MANIFEST.MF 文件，这个文件是在生成 JAR 文件的时候自动创建的。
特点：
平台无关 加快下载速度 安全：可对jar文件数字签名 分类：
可执行jar包（MANIFEST.MF文件里有主类入口配置：Main-Class: com.example.MyClass） 不可执行jar包 生成Jar包 利用IDE打包 这部分后面再说
命令行手动打包 1、打包单个java文件
# 编译生成 Hello.class 文件 javac Hello.java # 打包 jar -cvf hello.jar Hello.class /* 参数解释： -c 创建一个新的jar包 -v 创建的过程中在控制台输出创建过程的一些信息 -f 生成的jar包命名 */ /*打包完成的jar包里包含： */ 2、打包目录内的多个java文件
需要需要注意的是，以上命令行步骤打的jar包还不是可执行jar包。直接java -jar Hello.jar会报错。需要添加Main-Class属性：
TODO
执行 执行目标应是可执行jar包。除了直接双击执行，还可以采用命令行执行：
java -jar xxx.jar 参考链接 https://blog.csdn.net/shiboyuan0410/article/details/85043741
https://blog.csdn.net/weixin_33835459/article/details/114070826</description>
    </item>
    
    <item>
      <title>Linux-管道篇</title>
      <link>http://pipony.github.io/post/workspace/01-tech/linux/linux-%E7%AE%A1%E9%81%93%E7%AF%87/</link>
      <pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/linux/linux-%E7%AE%A1%E9%81%93%E7%AF%87/</guid>
      <description>Linux-管道篇 概念 管道（pipe）可以连接两个或多个命令，将前一个命令的标准输出作为后一个的标准输入（这也就意味着，若某命令不能支持标准输出/输入的话，则无法应用管道命令）
格式：命令1 | 命令2 | ...
管道和重定向（命令1 &amp;gt; file）的区别：重定向是接收对象是文件，而管道是接命令的。
管道（又称无名管道）和命名管道FIFO的区别：等后面学到命名管道了再说
注意点 管道只能传输正确输出，而无法传输错误信息。从管道接连输出的标准错误会混合到一起。 常见相关命令 grep (Global search REgular expression and Print out the line) 根据模式（正则表达式）对文本逐行扫描，找到并打印匹配的行
格式：
grep [options] [pattern] file or command | grep [options] [pattern] [options] -v # 反向匹配 invert (等同于--invert-match) -n # 输出加上行号 -i # 忽略大小写匹配 ignorecase -c # 只输出匹配的行数 -E # 适用egrep匹配 --color=auto # 为过滤结果添加颜色 (通常在alias中默认会有这个参数，如alias grep=&amp;#39;grep --color=auto&amp;#39;) -w # 整词对比，而不是字符 -o # 只输出匹配到的字符串本身（匹配到多少个就会输出几行） （常用于与wc -l配合获取到匹配的个数，而不是行数） -q # 静默模式（stderr除外，不输出任何东西 quiet） 等同于：--quiet, --silent （不打印任何标准输出，如果有匹配的内容则返回状态值0，常用于if判断等） -l # 只输出匹配的文件名 -r # 递归模式，查找所有层级子目录里的文件 [pattern] # 匹配模式，见正则表达式篇 例子：</description>
    </item>
    
    <item>
      <title>Redis-Jedis</title>
      <link>http://pipony.github.io/post/workspace/01-tech/redis/redis-jedis/</link>
      <pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/redis/redis-jedis/</guid>
      <description>Redis-Jedis 概念 通过Java来操作Redis的一个客户端。
接下来的内容等我学完spring之类的再来吧</description>
    </item>
    
    <item>
      <title>Redis-Redis6新数据类型</title>
      <link>http://pipony.github.io/post/workspace/01-tech/redis/redis-redis6%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/redis/redis-redis6%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>Redis-Redis6新数据类型 Bitmaps 本身不是一种数据类型，实际上是每个单位存储0和1的字符串，可以看作是以位为单位的数组，下标称为偏移量（从0开始）。但是操作命令和字符串不同。
[commands] - setbit key offset value # - getbit key offset - bitcount key [start] [end] # 以字节为单位统计1的个数，这和上面两个命令以bit为单位操作不同 - bitop ope destkey key [key...] # 对一或多个key做操作并保存在destkey:and（交集）,or（并集）,not（非）,xor（异或） 127.0.0.1:6379&amp;gt; setbit online1 0 1 (integer) 0 127.0.0.1:6379&amp;gt; setbit online1 1 1 (integer) 0 127.0.0.1:6379&amp;gt; getbit online1 0 (integer) 1 127.0.0.1:6379&amp;gt; bitcount online1 # 没有指定前后，就是求所有的1的个数 (integer) 2 127.0.0.1:6379&amp;gt; setbit online1 15 1 (integer) 0 127.0.0.1:6379&amp;gt; setbit online1 16 1 (integer) 0 127.</description>
    </item>
    
    <item>
      <title>Redis-发布和订阅</title>
      <link>http://pipony.github.io/post/workspace/01-tech/redis/redis-%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85/</link>
      <pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/redis/redis-%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85/</guid>
      <description>Redis-发布和订阅 概念 Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。共包括三个角色：发送者、频道(channel)、订阅者。
发布方往channel发布消息，若订阅方有订阅这个channel，则可以接收到这个消息。
一个订阅方可以订阅多个channel。
简单实践 打开redis客户端，订阅一个channel
127.0.0.1:6379&amp;gt; subscribe channel1 Reading messages... (press Ctrl-C to quit) 1) &amp;#34;subscribe&amp;#34; 2) &amp;#34;channel1&amp;#34; 3) (integer) 1 表示正在订阅状态
再打开一个redis客户端（在另一个会话中），发布消息：
127.0.0.1:6379&amp;gt; publish channel1 helloworld (integer) 1 # 返回的是当前订阅者的数量 此时就能看到订阅方接收到了这条消息：
127.0.0.1:6379&amp;gt; subscribe channel1 Reading messages... (press Ctrl-C to quit) 1) &amp;#34;subscribe&amp;#34; 2) &amp;#34;channel1&amp;#34; 3) (integer) 1 1) &amp;#34;message&amp;#34; 2) &amp;#34;channel1&amp;#34; 3) &amp;#34;helloworld&amp;#34; </description>
    </item>
    
    <item>
      <title>Redis-常用数据类型</title>
      <link>http://pipony.github.io/post/workspace/01-tech/redis/redis-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/redis/redis-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>Redis-常用数据类型 查看redis常见数据类型操作命令： http://www.redis.cn/commands.html
key类型 [commands] # 这些命令的含义很容易看出，故直接看例子吧 - keys * - set key value - exists key - type key - del key - unlink key - expire key time(second) - ttl key - dbsize [cindy@iZbp15qc4wmx335c268l5mZ ~]$ redis-cli 127.0.0.1:6379&amp;gt; keys * # 列出当前数据库的所有key (empty array) 127.0.0.1:6379&amp;gt; set k1 cindy # 设置key为&amp;#34;k1&amp;#34;的值为&amp;#34;cindy&amp;#34; OK 127.0.0.1:6379&amp;gt; set k2 coco OK 127.0.0.1:6379&amp;gt; set k3 alice OK 127.0.0.1:6379&amp;gt; keys * 1) &amp;#34;k3&amp;#34; 2) &amp;#34;k1&amp;#34; 3) &amp;#34;k2&amp;#34; 127.</description>
    </item>
    
    <item>
      <title>Redis-配置文件</title>
      <link>http://pipony.github.io/post/workspace/01-tech/redis/redis-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/redis/redis-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
      <description>Redis-配置文件 路径：原先位于/opt/redis-6.2.1/redis.conf，后面我们是copy一份到etc/redis.conf作为redis后台启动的配置文件。
配置文件中每条配置都给了充足的注释或例子。
以下按照课程介绍配置文件中一些常用的点：
单位 配置大小单位，开头定义了一些基本的度量单位。只支持bytes，不支持bit。大小写不敏感
# Note on units: when memory size is needed, it is possible to specify # it in the usual form of 1k 5GB 4M and so forth: # # 1k =&amp;gt; 1000 bytes # 1kb =&amp;gt; 1024 bytes # 1m =&amp;gt; 1000000 bytes # 1mb =&amp;gt; 1024*1024 bytes # 1g =&amp;gt; 1000000000 bytes # 1gb =&amp;gt; 1024*1024*1024 bytes # # units are case insensitive so 1GB 1Gb 1gB are all the same.</description>
    </item>
    
    <item>
      <title>Redis-Redis基础</title>
      <link>http://pipony.github.io/post/workspace/01-tech/redis/redis-redis%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/redis/redis-redis%E5%9F%BA%E7%A1%80/</guid>
      <description>Redis-Redis基础 Redis概述 开源 key-value value支持多种类型 操作原子性 支持不同方式的排序 缓存在内存 周期性地把更新的数据写入磁盘或者把修改操作写入追加的记录文件 master-slave(主从)同步 应用场景：
配合关系型数据库作高速缓存，降低数据库IO；分布式架构，做session共享
多样的数据结构存储持久化数据
Redis安装 最好在linux环境上用，所以我就直接安装在云服务器上
前置条件：服务器要带gcc编译器，可输入gcc --version来查看是否已有；若没有，则安装，因为我的云服务器自带了，所以此步省略
下载redis包：官网redis.io去下载（因为视频里讲的是Redis6，所以我也安装这个版本，直接用视频给出的安装包）
步骤：
将redis安装包ftp到服务器的/opt
tar -zxvf redis-6.2.1.tar.gz cd redis-6.2.1 make # 编译 如图表示编译好了
安装 make install
查看安装后的文件
[root@iZbp15qc4wmx335c268l5mZ bin]# ls -lrt /usr/local/bin -rwxr-xr-x 1 root root 9450208 Jul 4 21:31 redis-server -rwxr-xr-x 1 root root 4833352 Jul 4 21:31 redis-benchmark -rwxr-xr-x 1 root root 5003368 Jul 4 21:31 redis-cli lrwxrwxrwx 1 root root 12 Jul 4 21:31 redis-check-rdb -&amp;gt; redis-server lrwxrwxrwx 1 root root 12 Jul 4 21:31 redis-check-aof -&amp;gt; redis-server lrwxrwxrwx 1 root root 12 Jul 4 21:31 redis-sentinel -&amp;gt; redis-server redis-benchmark: 性能测试工具，可以在自己本子运行，看看自己本子性能如何</description>
    </item>
    
    <item>
      <title>ORACLE-存储过程</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/oracle-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/oracle-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>ORACLE-存储过程 概念 存储过程(Stored Procedure)：
一组为了完成某功能的一段sql语句集（一种PL/SQL块），存储在数据库中，经过第一次编译后再次调用就无需再次编译，用户通过调用指定存储过程名称和给定参数来调用。当数据库启动时,会自动加载到数据库内存中,执行效率高。
当对数据库进行复杂操作时(如对多个表进行Update、Insert、Query、Delete时），可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。
函数和存储过程的区别 https://www.php.cn/oracle/489142.html#/
存储过程 函数 用于在数据库中完成特定的操作或任务（如插入、删除等） 用于特定数据（如查询返回值） 程序头部声明用PROCEDURE 程序头部声明用FUNCTION 程序头部声明时不需要返回类型 程序头部声明时要描述返回类型，而且PL/SQL块至少要包括一个有效的RETURN语句 可以使用IN/OUT/IN OUT3种参数模式 可以使用IN/OUT/IN OUT3种参数模式 可以作为独立的PL/SQL语句执行 不能独立执行，必须作为表达式的一部分调用 可以通过OUT/IN OUT返回零个或多个值 对过RETURN语句返回一个值，且该值与声明部分一致，也可以通过OUT类型的参数带出变量 SQL语句（DML或SELECT）中不可以调用存储过程 SQL语句（DML或SELECT）中可以调用函数 优点 更快（无需再次编译） 模块性 可维护性高 节省网络传输（存储在数据库中） 更安全（存储过程控制执行权限） 存储过程创建语法 CREATE [OR REPLACE] PROCEDURE pro_name [(p1 in|out 数据格式, p2 in|out 数据格式, ...)] is|as 声明部分 begin plsql代码块 exception 异常处理部分 end; 注意：
OR REPLACE表示的是若已存在同名存储过程，则替换原内容
形参定义中：
参数不区分大小写，不需要DECLARE关键字
其中参数IN表示输入参数，是参数的默认模式。入参值无法被修改。 OUT表示返回值参数，类型可以使用任意Oracle中的合法类型。 OUT模式定义的参数只能在过程体内部赋值，表示该参数可以将某个值传递回调用他的过程 IN OUT表示该参数可以向该过程中传递值，也可以将某个值传出去。
声明部分：用于存储过程使用到的变量声明 https://www.cnblogs.com/caiguangbi-53/p/11398696.html#/
声明的三种方法
直接声明数据类型，如p1 varchar2(60)或p2 number(2) 沿用数据表中某数据字段类型%TYPE，如p1 table1.</description>
    </item>
    
    <item>
      <title>Redis-NoSQL数据库</title>
      <link>http://pipony.github.io/post/workspace/01-tech/redis/redis-nosql%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/redis/redis-nosql%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>Redis-NoSQL数据库 NoSQL数据库概述 NoSQL(No only SQL)，泛指非关系型数据库，数据与业务逻辑无关，以key-value形式存储。因此可以大大增加数据库的扩展能力。
特性：
不遵循SQL标准 不支持ACID（SQL四特性） 远超SQL性能 适用场景：读写高并发、海量数据、高可扩展性
不适用场景：需要事务、用到基于sql 的结构化查询存储，处理复杂的关系
注意：用不着sql的和用了sql也不行的情况，请考虑用NoSql
常见NoSQL数据库 Memcache 不持久化（断电即数据消失） 存储只支持字符串类型 一般是作为缓存数据库辅助持久化的数据库 Redis 持久化，主要用作备份恢复 支持多种数据结构（如 list、set、hash、zset） 一般是作为缓存数据库辅助持久化的数据库 MongoDB 文档型数据库（json） 支持二进制数据及大型对象 独立的数据库，或者配合RDBMS Hbase（Hadoop项目中的数据库。它用于需要对大量的数据进行随机、实时的读写操作的场景中） Apache Cassandra（其设计目的在于管理由大量商用服务器构建起来的庞大集群上的海量数据集(数据量通常达到PB级别)） 图关系型数据库 </description>
    </item>
    
    <item>
      <title>Redis开始</title>
      <link>http://pipony.github.io/post/workspace/01-tech/redis/redis%E5%BC%80%E5%A7%8B/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/redis/redis%E5%BC%80%E5%A7%8B/</guid>
      <description>Redis开始 资源 【尚硅谷】Redis 6 入门到精通 超详细 教程
https://www.bilibili.com/video/BV1Rv41177Af?spm_id_from=..search-card.all.click&amp;amp;vd_source=388c468b983bcf7b800d0e7cfb9fc719#/
2022-07-03 开始跟着这个课程入门，笔记也是配套这个课程的</description>
    </item>
    
    <item>
      <title>文档注释</title>
      <link>http://pipony.github.io/post/workspace/01-tech/java/%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/java/%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/</guid>
      <description>文档注释 本来以为单行和多行注释没啥好学的，本文只想了解下【文档注释】。写到最后发现，如何优雅的注释本身，也是门大学问。
定义 Java普通注释格式
// 或 /* */ Java文档注释格式
/** @xxx */ 文档注释主要用于生成javadoc文件的，便于我们对所写的类、方法等进行解释。支持HTML格式。
文档注释目标 https://blog.csdn.net/weixin_39190897/article/details/81880411#/
（1）类注释。类注释用于说明整个类的功能、特性等，它应该放在所有的“import”语句之后，在class定义之前。这个规则也适用于接口（interface）注释。 （2）方法注释。方法注释用来说明方法的定义，比如，方法的参数、返回值及说明方法的作用等。方法注释应该放在它所描述的方法定义前面。 （3）属性注释。默认情况下，javadoc只对公有（public）属性和受保护属性（protected）产生文档——通常是静态常量。 （4）包注释。类、方法、属性的注释都直接放到Java的源文件中，而对于包的注释，无法放到Java文件中去，只能通过在包对应的目录中添加一个package.html的文件来达到这个目的。当生成HTML文件时，package.html文件的和部分的内容将会被提取出来当做包的说明。关于包注释，后面还会有更进一步的解释。 （5）概要注释。除了包注释外，还有一种类型的文档无法从Java源文件中提取，就是对所有类文件提供概要说明的文件。同样的，也可以为这类注释单独新建一个HTML文件，这个文件的名字为“overview.html”，它的和标记之间的内容都会被提取。 文档注释格式 概要描述：一段话简要描述基本内容 详细描述：几大段描述 功能 和 相关情况 文档标注：参数、作者、返回值等 注释标签释义 可参考 https://www.runoob.com/java/java-documentation.html#/ 等
常见的例如：
@author 作者 @param 输入参数 @return 返回参数 @exception 异常 @throws 同exception @deprecated 指明一个过期的类或成员（不推荐使用的方法） @version 版本 javadoc 工具 参考 https://www.cnblogs.com/codepeace/archive/2021/04/30/14722083.html#/
命令行
在要生成javadoc的.java的文件夹中，cmd输入命令javadoc -encoding UTF-8 -charset UTF-8 *.java
其中-encoding和-charset分别是编码格式和字符集格式。javadoc命令参数解释，可参考见 https://www.csdn.net/tags/MtjaMgwsMTU4MzAtYmxvZwO0O0OO0O0O.html#/
IDE中生成
生成的 index.html 文件，就是我们想要的
多说两句 一般IDE都有提供可以自定义文档注释模板的地方，可以定义适合自己的格式，一劳永逸
有需要的话，可以自己定义文档注释标签
注释侧重WHY，而不是HOW
注释要优雅 https://zhuanlan.zhihu.com/p/41127713#/ ，例如下面的文档注释：</description>
    </item>
    
    <item>
      <title>Linux-top命令</title>
      <link>http://pipony.github.io/post/workspace/01-tech/linux/linux-top%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/linux/linux-top%E5%91%BD%E4%BB%A4/</guid>
      <description>Linux-top命令 概念 实时显示系统进程信息的命令、内存使用情况、系统负载情况等（有点类似于Windows系统下的任务管理器）
执行权限：所有用户
命令 #TODO
快捷键 摘自：https://blog.csdn.net/Luckiers/article/details/123909819#/
Ctrl+L 擦除并且重写屏幕。 h或者? 显示帮助画面，给出一些简短的命令总结说明。 k 终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号；如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽。 i 忽略闲置和僵死进程。这是一个开关式命令。 q 退出程序。 r 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10。 S 切换到累计模式。 s 改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加。 f或者F 从当前显示中添加或者删除项目。 o或者O 改变显示项目的顺序。 l 切换显示平均负载和启动时间信息。 m 切换显示内存信息。 t 切换显示进程和CPU状态信息。 c 切换显示命令名称和完整命令行。 M 根据驻留内存大小进行排序。 P 根据CPU使用百分比大小进行排序。 T 根据时间/累计时间进行排序。 W 将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。 结果解读 解读截图（来自 https://blog.csdn.net/zhuoya_/article/details/81049967#/）：
分析：top命令截图（以我自己的云主机为例）
前5行是系统状态总览，后面是依次分析系统正在运行的每个任务的状态
第1行：任务队列信息（同 uptime 命令的执行结果，依次是当前时间、系统已经运行的时间、当前用户数、系统负载【即任务队列的平均长度。 三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值】）
第2行：进程任务信息（依次是进程总数、正在运行、睡眠、停止、僵尸进程数）
第3行：用户空间CPU的占比
us: is meaning of &amp;#34;user CPU time&amp;#34; sy: is meaning of &amp;#34;system CPU time&amp;#34; ni: is meaning of&amp;#34; nice CPU time&amp;#34; id: is meaning of &amp;#34;idle&amp;#34; wa: is meaning of &amp;#34;iowait&amp;#34; hi：is meaning of &amp;#34;hardware irq&amp;#34; si : is meaning of &amp;#34;software irq&amp;#34; st : is meaning of &amp;#34;steal time&amp;#34; us 用户空间占用CPU百分比 sy 内核空间占用CPU百分比 ni 用户进程空间内改变过优先级的进程占用CPU百分比 id 空闲CPU百分比 wa 等待输入输出的CPU时间百分比 hi 硬件中断 si 软件中断 st: 实时 https://blog.</description>
    </item>
    
    <item>
      <title>ORACLE-序列</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/oracle-%E5%BA%8F%E5%88%97/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/oracle-%E5%BA%8F%E5%88%97/</guid>
      <description>ORACLE-序列 背景：了解NEXTVAL的概念
ORACLE序列 概念 是oacle提供的用于产生一系列唯一数字的数据库对象。主要用于提供主键值。
sequence是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。**其主要的用途是生成表的主键值，可以在插入语句中引用，在插入之前，获取序列号nextval值，然后进行插入。**也可以通过查询检查当前值，或使序列增至下一个值。（https://www.jb51.net/article/220007.htm#/）
创建方式 CREATE SEQUENCE sequence //创建序列名称 [INCREMENT BY n] //递增的序列值是n 如果n是正数就递增,如果是负数就递减 默认是1 [START WITH n] //开始的值,递增默认是minvalue 递减是maxvalue [{MAXVALUE n | NOMAXVALUE}] //最大值 [{MINVALUE n | NOMINVALUE}] //最小值 [{CYCLE | NOCYCLE}] //循环/不循环 [{CACHE n | NOCACHE}];//分配并存入到内存中 CURRVAL CURRVAL 中存放序列的当前值
SELECT INR_REQUIRMENT_SQUENCE.CURRVAL FROM dual - 获取当前的sequence的值
CURRVAL = 最后一次对 NEXTVAL 的引用所返回的值
NEXTVAL NEXTVAL 返回序列中下一个有效的值，任何用户都可以引用
select SEQ_TABLESPACETEST_con.nextval from dual - 获取下一个值，序列经过查询每次也会自增
注意：
第一次访问序列时，需要先引用 sequence.NEXTVAL获取初始值。第一次在没有访问NEXTVAL前，是没有CURRVAL的。 后面每次引用 NEXTVAL，用已定义的 step 添加序列值并返回序列新的添加以后的值。 一个sql语句中只能生成一次nextval，就算调用多次，获取的也只有一个nextval nextval添加完的序列值不能取消，也就是说就算后面回滚当前事务，也不会还原。故：某些序列数可能被跳过 假设 sequence.</description>
    </item>
    
    <item>
      <title>SQL函数篇</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/sql%E5%87%BD%E6%95%B0%E7%AF%87/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/sql%E5%87%BD%E6%95%B0%E7%AF%87/</guid>
      <description>SQL函数篇 lpad/rpad函数 lpad/rpad函数 此为Oracle函数。l/r(left/right)+pad(填充)，表示从左边/右边填充。
格式：lpad( string, padded_length, [ pad_string ] ) （rpad同理）
参数一：被填充/截取的原字符串
参数二：最终长度
参数三：填充的字符，若无赋值，则默认填充空格
注意：若原字符串长度大于参数二的长度，则lpad从左开始截取指定长度（rpad从右边）
SQL&amp;gt; select lpad(&amp;#39;abcde&amp;#39;,10,&amp;#39;x&amp;#39;) from dual; LPAD(&amp;#39;ABCDE&amp;#39;,10,&amp;#39;X&amp;#39;) -------------------- xxxxxabcde SQL&amp;gt; select lpad(&amp;#39;abcde&amp;#39;,2) from dual; LPAD(&amp;#39;ABCDE&amp;#39;,2) --------------- ab 参考链接：https://blog.csdn.net/yulei_qq/article/details/17389901#/</description>
    </item>
    
    <item>
      <title>异常的处理</title>
      <link>http://pipony.github.io/post/workspace/01-tech/java/%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/java/%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86/</guid>
      <description>异常的处理 分类 异常（Exception） 运行时异常RuntimeException（不受检异常）：此类异常编译器不检查，一般是程序逻辑错误引起的，可捕获处理，也可不处理。如NullPointerException、ArrayIndexOutBoundException。 非运行时异常/编译时异常（受检异常）：编译器检查此类异常，并且强制要做处理（捕获或抛出）。如IOException。 错误（Error）：非代码性错误，与异常不同的是，这类错误是程序无法处理的。此类错误发生时，JVM将终止线程。如Virtual MachineError（虚拟机运行错误）、NoClassDefFoundError（类定义错误）。 异常的层次 Exception和Error都继承自Throwable类。层次图可见下图（列出主要的异常类）
常见内置异常类 Java 语言定义了一些异常类在 java.lang 标准包中。主要分类可见 https://www.runoob.com/java/java-exceptions.html#/
或者链接 https://blog.csdn.net/Pandafz1997/article/details/119898686#/ 给出的：
异常类	说明 ClassCastException	类型转换异常 ArrayIndexOutOfBoundsException	数组越界异常 NegativeArraySizeException	指定数组维数为负值异常 ArithmeticException	算数异常 InternalException	Java系统内部异常 NullPointerException	空指针异常 IllegalAccessException	类定义不明确所产生的异常 IOException	一般情况下不能完成I/O操作产生的异常 EOFException	打开文件没有数据可以读取的异常 FileNotFoundException	在文件系统中找不到文件路径或文件名称时的异常 ClassNotFoundException	找不到类或接口所产生的异常 CloneNotSupportedException	使用对象的clone方法但无法执行Cloneable所产生的异常
异常处理 方法1：捕获处理 try+catch(+finally)
try { xxx; //程序 } catch (ExceptionName e) { xxx; //捕获异常时的处理 } finally { xxx; //最终执行的代码块 } 若指定捕获特定的异常类，则在catch中指定异常类；若要捕获任意异常，则直接用Exception e。
finally不是必须的，包含无论是否发生异常都会被执行到的代码块（一般包含清理类型等收尾善后性质的语句）。
有4种特殊情况，finally块不会被执行：
finally语句块中发生了异常 前面的代码中执行了System.exit()退出程序 程序中所在的线程死亡 关闭CPU 需要注意的是，就算try块中有return，也会先执行完finally再return。</description>
    </item>
    
    <item>
      <title>开始Hugo&#43;Github Pages</title>
      <link>http://pipony.github.io/post/workspace/01-tech/other/%E5%BC%80%E5%A7%8Bhugo&#43;github-pages/</link>
      <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/other/%E5%BC%80%E5%A7%8Bhugo&#43;github-pages/</guid>
      <description>开始Hugo+Github Pages 参考：https://www.gohugo.org/#/
准备工作准备 安装Hugo，git过程略
配置Hugo路径到环境变量Path 过程略
生成站点 hugo new site /D:/hugo/huangxdBlog 生成站点到本地路径：/D:/hugo/huangxdBlog
可以看到/D:/hugo/huangxdBlog下已生成初始站点结构：
▸ archetypes/▸ content/▸ layouts/▸ static/config.toml 创建文章 hugo new about.md 生成路径自动为：/content/about.md
hugo new post/first.md 生成路径自动为：/content/post/about.md
安装皮肤模板 从 https://www.gohugo.org/theme/#/ 或者 https://themes.gohugo.io/#/挑选合适的模板，下载
$ cd themes$ git clone https://github.com/spf13/hyde.git 本地调试 在本地运行并预览网站效果
hugo server --theme=angels-ladder --buildDrafts 注意：将hyde换成自己的主题名
如果已经在config.toml中配置了theme，则运行语句可以缩减为：
hugo server --buildDrafts 浏览器里打开链接，可浏览本地效果:
http://localhost:1313 部署 GitHub上先新建一个仓库（命名：#pipony#(换成自己的github用户名).github.io） 生成最终页面 在根目录执行：
hugo --theme=hyde --baseUrl=&amp;#34;http://pipony.github.io/&amp;#34; 同理：在配置文件中若已经指定了主题，则可以忽略--theme参数：
hugo --baseUrl=&amp;#34;http://pipony.github.io/&amp;#34; 此时会在/public目录下生成所有静态页面，再将/public/*上传到github的main分支即可（注意：不要变成master分支了）
（注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成。）</description>
    </item>
    
    <item>
      <title>数据库无效对象</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A0%E6%95%88%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A0%E6%95%88%E5%AF%B9%E8%B1%A1/</guid>
      <description>数据库无效对象 背景：报“ORACLE存在无效对象，可能影响应用性能，评估是否重建对象”
概念 无效：INVALID 对象：视图、物化视图、函数、包、触发器等 无效 PL/SQL 对象和不可用索引会对性能产生影响。无效 PL/SQL 对象必须先进行重编译，然后才能使用。这需要在执行尝试访问 PL/SQL 程序包、过程或函数的第一个操作之前花费一段编译时间。如果 PL/SQL 重编译未成功，，则操作会因发生错误而失败。优化程序会忽略不可用索引。如果 SQL 语句性能的好坏取决于已标记为不可用的索引，则只有重建索引才能改善性能。
如果查找到 INVALID 状态的 PL/SQL 对象，需要回答的第一个问题是“此对象曾经是 VALID 的吗？”应用程序开发人员常常会忘记清除不起作用的代码。如果 PL/SQL 对象因代码错误而无效，则除了纠正该错误之外，没有什么别的方法。如果该过程在过去曾经有效，最近才变为无效，则可选择以下两种方法解决这个问题：
1.不做任何处理。如果需要，大多数 PL/SQL 对象在调用时会自动重新编译。用户在对象重新编译时会经历短暂的延迟。（大多数情况下，这种延迟不十分明显。）
2.手动重新编译无效对象。
无效对象产生的原因 当被引用对象的结构变更时，都会使得相关的依赖对象转变为INVALID状态
如视图A来源于表B，当表B的结构改变时，会导致视图A变成无效对象。但当再一次调用视图A时，会自动编译视图A，使其再次变为有效。
发布SQL脚本时（包、存储过程、函数等），没有充分测试，编译时出错，这时对象变为无效。
数据库升级、迁移时，出现大量无效对象(本质原因，臆测归结为原因1)
诸如此类各种情况：例如，Oracle 会自动维护分区索引，对于全局索引，如果在对分区表操作时，没有指定update index，则会导致全局索引失效，需要重建。
查找无效对象 统计失效对象 执行用户：SYSTEM用户或其他有权限的用户
SQL&amp;gt; select owner, object_name, object_type from dba_objects t where status = &amp;#39;INVALID&amp;#39; order by t.owner,t.object_type; 或者
select owner, object_type, status, count(*) from dba_objects where status=&amp;#39;INVALID&amp;#39; group by owner, object_type, status order by owner, object_type 查看具体失效对象 col owner for a20; col object_name for a32; col object_type for a16 col status for a8 select owner, object_name, object_type, status from dba_objects where status=&amp;#39;INVALID&amp;#39; order by 1,2,3; 解决 重新编译失效的对象（以下步骤参考：https://developer.</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-00 无分类</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/00-%E6%97%A0%E5%88%86%E7%B1%BB/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/00-%E6%97%A0%E5%88%86%E7%B1%BB/</guid>
      <description>00 无分类 海明码（Hamming code） https://www.bilibili.com/video/BV1SJ41157pR?spm_id_from=333.337.search-card.all.click#/
https://www.cnblogs.com/godoforange/p/12003676.html#/
遇到这种题，做题练一下
CRC校验法（循环冗余校验 Cyclic Redundancy Check） https://seedeer.github.io/2022/03/20/crc/#/
https://www.bilibili.com/video/BV1rJ411V7L5?spm_id_from=333.337.search-card.all.click#/</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-01 计算机组成与体系结构</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</guid>
      <description>01 计算机组成与体系结构 数据的表示 进制转换 R进制-&amp;gt;十进制：底数，指数
十进制-&amp;gt;R进制：短除法
二进制-&amp;gt;八进制，十六进制
编码 原码：正常转为二进制，位数不足前面补0。最高位为符号位（0正1负） 反码：正数=原码；负数：符号位不动，其他位原码取反 补码：正数=原码；负数：反码+1 移码：一般用来做浮点运算的阶码；符号位为补码的反，其他位一样。这样在数轴上，正数在负数的右边，看起来正常些 ps. 原码：1-1为-2，是不正常的，因此计算机里不能用原版来做加减
移码 https://blog.csdn.net/Desire_Dir_W/article/details/114399797#/
表示范围 为何补码比原/反码多一个数：原/反码有正负0，补码只有一种0的表示
浮点数运算 M*R^e
M：尾数；R：基数：e：指数
对阶（小向大的指数对） - 尾数计算 - 结果格式化（尾数小数点左边是1）
计算机结构 主机=CPU（运算器+控制器）+主存储器
Flynn分类法 单I/多M+指令I/数据D
SISD 现在的机器几乎没有，可能在单片机用到
SIMD 阵列处理机：适合处理数组运算
MISD 只在理论中
MIMD 全面并行
CISC和RICS CISC 比较早期，通常是定制。指令数量多；可变长格式
RICS 复杂操作由简单操作组成即可；定长格式；操作寄存器；硬布线（速度快）
流水线 主要考察计算
周期 概念：执行时间最长的一个步骤时间
n条指令全部执行时间：
理论公式：1条指令执行时间+（指令条数-1）*流水线周期 实践公式：（k+n-1）*周期；k为子指令个数 考试时优先用理论公式算，没有这个选项，再用实践公式
吞吐率 概念：单位时间内处理指令条数
公式：TP=指令条数/流水线时间
最大吞吐率：
理解：极限情况下（不考虑流水线建立的时间等），1条指令配合上一个流水线周期
加速比 概念及公式：同一个任务不使用流水线时间/使用流水线时间
效率 概念：流水线的设备利用率。时空图中，设备占用时空区占总时空区之比。
公式：
每个子任务时间一样 -&amp;gt; 效率最高
存储 层次化存储结构 cache 特点：
CPU和内存之间 为何能改善系统性能：局部性原理 平均周期公式</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-02 操作系统</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/02-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/02-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description>02 操作系统 概述 操作系统的角色：
管理系统的硬件、软件、数据资源 控制程序运行 人机之间的接口 应用软件与硬件之间的接口 管理分类：
进程管理 存储管理 文件管理 作业管理 设备管理 进程状态 三态模型
运行：万事具备 就绪：只等CPU资源 等待：除了CPU资源，还在等其他资源 五态模型
运行 静止就绪（运行过程中主动挂起） 活跃就绪 静止阻塞 活跃阻塞=等待 前趋图 同步与互斥 互斥：一个资源同时只能被一个进程所用 同步：速度有差异，一定情况下要等待 【注意】：两者不为相反的概念，互斥&amp;lt;-&amp;gt;共享，同步&amp;lt;-&amp;gt;异步
在生产者消费者问题，理解互斥和同步：如一个商场只能存放一件物品，若目前已有一件时，生产者无法将新的一件放入（互斥）；生产者是否可以放入也取决于消费者是否消费了这个物品，只有等消费者消费了，生产者才能新生产（同步）
PV操作 概念 临界资源：进程间需要互斥访问的资源（如打印机，磁带机）
临界区：每个进程中访问临界资源的那段代码
信号量：一种特殊的变量，如P(s)中的s
P分配（减），V释放（加）
例子（单缓冲区）：
习题：
答案：A和C
PV操作和前趋图 【重要！经常考！】
例题（答案：CAA）：
解题思路：信号量的赋值可根据从上到下、从左到右的原则赋值，出箭头设为V(s)，入箭头设为P(s)。如P1出箭头那里是V(S1)，P2出箭头那里是V(S2)，P3入箭头那里是P(S1)和P(S2)。
死锁 最小需要多少个资源不发生死锁 公式：k*(n-1)+1；k：进程数，n，每个进程需要的资源数
死锁四大条件 互斥 保持和等待 不剥夺 环路等待 解决死锁 预防：打破四大条件 避免：有序资源分配法，银行家算法 银行家算法 例题：
存储管理 分区存储 首次适应法 最佳适应法（空闲区块按大小顺序链式排列，找最小能满足分配空间的内存块） 内存碎片多 最差适应法（类似最佳，找最大能满足的内存块） 循环首次适应法（把可分配区块循环链接起来，下次就先看下一块能否分配，而不是从头开始匹配） 分配均匀些 页式存储 把用户程序等分为固定大小的页，这样不需要一次性将全部程序导入内存才能运行
优点：利用率高，碎片小，分配及管理简单 缺点：增加系统开销；可能产生抖动现象 常考：逻辑和物理地址的转换</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-03 数据库系统</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/03-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/03-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</guid>
      <description>03 数据库系统 三级模式-两级映射 内模式（物理级数据库）：如何存储数据（格式等） 概念模式（概念级数据库）：表级别（关注【概念模式-内模式映射】） 外模式（用户级数据库）：视图（隔绝概念模式的修改【外模式-概念模式映射】，灵活性） 数据库设计过程 ER模型：与物理数据库无关
关系模式：表形式，规范化理论
E-R模型 矩形：实体；椭圆：属性；菱形：关系
子模型集成
逐步集成 一次集成 集成产生的冲突
属性冲突（属性域或取值冲突） 命名冲突（同名异义，异名同义） 结构冲突（可能一个作为表，一个作为列） 实体型转换为关系模式
1：1 - 转成两张表，菱形联系可跟任意一个 1：n - 转成两张表，菱形联系跟N m：n - 转成三章表，菱形联系单独一张表 ps.即使是多对多对多的，也只需一个关系来表示菱形
关系代数 并：注意：相同行只显示一次
交
差
笛卡尔积（✖）：完全组合；属性数为两关系相加；行数为两关系行数相乘
投影
选择
连接：都有的属性只保留一个**（这点和笛卡尔积不同）**；等值连接、自然连接 规范化理论 函数依赖 部分函数依赖：其中的某一个属性，可以形成函数依赖
价值与作用 非规范化可能存在的问题：数据冗余，更新/插入/删除异常
键 超键（可能存在冗余属性）：唯一标识元组 候选键（超键消除多余属性-&amp;gt;候选键，可以有多个） 主键（候选键任选一个） 外键：其他关系的主键，对表做关联的时候可用 求候选键：图示法
根据依赖关系画依赖图，找到所有入度为0的节点，尝试遍历所有节点，成立则为候选键。注意有可能是多个节点组合成候选键。若没有入度为0的节点，则找既有入度也有出度的节点，同样进行遍历分析。
范式 级别越高，规范程度越高
主属性：属于候选键的一部分
第一范式：当且仅当所有域只包含原子值，即不可再分
第二范式：第一范式的基础上，不存在部分依赖
第三范式：第一范式的基础上，没有非主属性传递依赖于码时
BC范式：所有函数依赖的左边部分必须包含候选键
例题：
答案：C D A
模式分解 保持函数依赖分解：函数依赖关系不变（冗余的函数依赖不需要保持） 无损分解：可以还原，可通过联结还原成原始的关系模式 或者：表格法
假设有一行全部是a，则说明还原好了，也就是无损分解。
或者：代数运算法（仅限于分解为两个的情况）
并发控制 事务 原子性（全做or全不做） 一致性（转账前后加起来钱都一样） 隔离性 持续性 并发存在的问题 丢失更新 不可重复读 读脏数据 封锁协议 死锁 预防 解除 数据库完整性约束 分类 实体完整性约束：如主键不能为空 参照完整性约束：外键约束 用户自定义完整性约束 触发器：更加复杂的用脚本写的约束 数据库安全 数据备份 冷备份（静态备份）：数据库关闭情况下的备份 热备份（动态备份）：正常运行时的备份 根据备份量区别：</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-04 计算机网络</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/04-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/04-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
      <description>04 计算机网络 OSI/RM七层模型 中继器/集线器：延长传输距离（类似烽火台）
例题：
分析：考察局域网的通信范围，局域网是下面两层（物理层和数据链路层连接的），所以P和S之间经过路由器（网络层）的话，就不能通信。
网络技术标准和协议 TCP：三次握手，可靠传输
UDP：没有反馈过程
DHCP：IP地址动态分配
DNS：域名映射到IP地址
递归查询：亲自深挖，不断根据线索问其他服务器，最终把正确的IP反馈给客户（如本地域名服务器，因为其压力不大）
迭代查询：只提供线索，没有刨根究底（如根域名服务器）
计算机网络分类 拓扑结构 单点故障：环形比星型稳定，因为一个点故障可以从另一头走
网络规划与设计 逻辑网格设计 物理网络设计 分层设计（考比较多） IP地址与子网划分 全0：网络地址；全1：广播地址
A类：前8位网络号，后24位为主机号，可包含2^24-2主机
B类：前16位网络号，后16位为主机号，可包含2^16-2主机
C类：前24位网络号，后8位为主机号，可包含2^8-2主机
例题：
或者问是否在同一个子网内，怎么看：把ip化为2进制，根据网络号有多少位，看最终的网络号是否相同
无分类编制 例题：
分析：已知C类子网有24位的网络号，现在是20位，也就是还有4位可以拿来作子网号，2^4=16
特殊含义的IP地址 HTML（考的少） 无线网 网络接入技术 IPv6 IPv4：32位地址，地址不够用
IPv4：128位地址</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-05 计算机安全</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/05-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/05-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/</guid>
      <description>05 计算机安全 信息系统安全属性 完整性：保证A到B的消息没被篡改
加密技术 对称加密 非对称加密 信息摘要 特性：单向
用于验证数据完整性
数字签名 特性：防抵赖
加密（即数字签名）：私钥；解密（即数字签名的验证过程）：公钥；不是真正的加密和解密
与信息摘要技术结合：对信息摘要进行数字签名（而不是对原消息进行数字签名）
数字信封与PGP 综合例题 例题：设计邮件加密系统
网络安全 网络层级的安全保障 网络威胁与攻击 要会区分窃听和业务流分析
防火墙技术 应用级：把内容拆出来分析看有无问题
网络级：比如看源和目的ip
屏蔽子网：内部网和外部网之间额外的一个防护</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-06 数据结构与算法基础</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/06-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/06-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</guid>
      <description>06 数据结构与算法基础 数组 考点：存储地址计算
稀疏矩阵 矩阵坐标转换到数组坐标的解题技巧：带入特殊值
数据结构的定义 概念：计算机存储和组织数据的方式
逻辑结构划分
线性结构 非线性结构 树 图 线性表 分类
顺序表（一维数组形式）
链表（节点包含数据与指针）
单链表 循环链表 双向链表 队列（先进先出）
循环队列
栈（先进后出）
链表的基本操作（删除和插入节点）
顺序存储和链式存储对比：
广义表 概念：线性表的推广，以递归的方式进行定义
广度（最外层括号包含的元素个数）、深度（包含括号的重数）
表头head（最外括号的第一个元素）、表尾tail（除去表头的其他所有部分）
树与二叉树 结点的度：孩子数
数的度：所有结点度数最高的度
内部节点：非头节点和叶子节点
深度：最大的层数
特殊二叉树 满二叉树 完全二叉树（除最后一层，上面层都满；且最后一层从左到右没有中间缺失的情况） 二叉树遍历 前、中、后序遍历：差别在根节点前、中、后时候被访问
层次遍历
反向构造二叉树 例题：
树转二叉树 原则：
孩子结点 -&amp;gt; 左子树结点 兄弟结点 -&amp;gt; 右孩子结点 除了挨个用【原则】分析，还可以用连线法：如上图的虚线图所示。将兄弟结点连起来，并将第一个孩子以外的孩子结点的连线去掉，然后旋转，得到最终的二叉树
查找二叉树（二叉排序树） 特点：
左孩子小于根 右孩子大于根 极大提高查找速度 操作：插入和删除结点
最优二叉树（哈夫曼树） 哈夫曼树：用于无损压缩
基本概念：
树的路径长度 权（每个结点的数值，一般表示出现的频度） 带权路径长度 树的带权路径长度（树的代价） 构造哈夫曼树：即构造带权路径长度最小的树
例题：
求解树的带权路径长度：将所有叶子结点的带权路径长度相加
线索二叉树 why：很多结点的左右指针是空的，可以利用这些空闲指针，来方便遍历
前序线索二叉树 中序线索二叉树 后序线索二叉树 构造线索二叉树：左右线索指针指向的是x序排列的前/后面的结点</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-07 程序设计语言与语言处理程序基础</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/07-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/07-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/</guid>
      <description>07 程序设计语言与语言处理程序基础 编译过程 文法定义 有限自动机 例题（常考）：
答案：C
正规式 例题：
答案：D C
表达式 答案：D
函数调用 - 传值和传址 传值：不真正改变实参 传址：真正改变实参 各种程序语言特点 </description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-08 法律法规</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/08-%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/08-%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84/</guid>
      <description>08 法律法规 保护期限 知识产权人确定 侵权判定 标准化基础知识 标准的分类 标准的编号 </description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-09 多媒体基础</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/09-%E5%A4%9A%E5%AA%92%E4%BD%93%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/09-%E5%A4%9A%E5%AA%92%E4%BD%93%E5%9F%BA%E7%A1%80/</guid>
      <description>09 多媒体基础 基本概念 音频概念 次声波：&amp;lt;20Hz；超声波：&amp;gt;20kHz
图像概念 亮度 色调（如红，绿） 饱和度：色彩艳丽程度 彩色空间：
CMY：印刷领域；CMYK（K：黑色）
HSV(HSB)：艺术家空间，从艺术欣赏的角度
媒体的种类 易考：输入设备也包含在显示（表现媒体）媒体中
多媒体相关计算 例题：
注意单位和(k和K：k为1000，存储的K为1024)
常见多媒体标准 数据压缩 压损的前提：有冗余
有损压缩与无损压缩 </description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-10 软件工程</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/10-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/10-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</guid>
      <description>10 软件工程 软件开发模型 瀑布模型（SDLC） 缺陷：需求难以在项目初期明确确定
适用于：
需求明确 二次开发 结构化开发 其他经典模型 原型（针对需求不明确的情况）：在初期先构造一个简易的系统，给用户做演示，记录用户发现的问题，再做调整。往往只用于需求分析阶段。最终变为演化模型。
增量模型：先做核心部分，给用户用；发现问题，逐步修改和继续开发剩下内容。
螺旋模型 特征：
多个模型组成 引入了风险分析 V模型 特点：
强调测试 在前半部分的过程，同时也做后半部分的测试准备 喷泉模型 特点：
面向对象模型 迭代 无间隙 RAD 特点：
快速构建应用系统 构件组装模型(CBSD) 特点：
提高复用性，缩短时间，减少成本，提高可靠性 统一过程（UP/RUP） 特点：
用例驱动 以架构为中心 多轮迭代和增量 敏捷开发方法 特点：
一组模型 比较适合(中)小型项目 信息系统开发方法 结构化方法缺点：一旦开发完，整个流程不容易改变
需求开发 需求分类与获取 结构化设计 多扇入：复用性高；少扇出：一个函数包括的职能较少
内聚与耦合 软件测试（常考） 回归测试：将之前的测试案例再测下，看会不会发现新的问题
测试用例设计 等价类划分：选出各种类的代表性数据来测
错误推测：根据经验，推测哪些容易产生问题
测试阶段 单元测试：模块级/函数级
集成测试：模块之间的衔接
确认测试：确认需求实现
McCabe复杂度（常考） 注意：分叉点是否要转为结点，复杂度公式的结果都一样。如右边结点的5和6，如果不转换，则2、3、4都指向7，计算结果一致
系统运行与维护（常考） 适应性维护：适应系统、数据环境
完善性维护：扩充功能、改善功能
软件过程改进 CMMI 阶段式：
已管理级：项目级 已定义级：文档标准化 定量管理级：量化管理 优化级：持续优化 连续式：
过程管理 项目管理 工程 支持 项目管理 甘特图：关键路径的计算</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-11 面向对象设计</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/11-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/11-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/</guid>
      <description>11 面向对象设计 边界类：与外界系统交互
控制类：类之间的衔接类
封装：提供给外部接口，外界用接口调用
设计原则 UML 设计模式 架构和设计模式区别：全局or局部
设计和惯用法区别：是否与实现语言相关
设计模式的分类 创建型模式 抽象工厂：只需指定生产的系列名，而不是类
构建器：部件构建组合
原型（克隆原型）：拷贝现有对象来生成新的对象
单例：保证一个类只有一个实例
结构型模式 行为型模式 </description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-12 数据流图（DFD）</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/12-%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BEdfd/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/12-%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BEdfd/</guid>
      <description>12 数据流图（DFD） 数据流图基本概念 自上往下细分
数据字典 数据流图的平衡原则 父图与子图之间的平衡（如顶层-&amp;gt;0层）：外部实体到系统的连线数据流内容和方向应该是不变的
子图内平衡：有输入没输出/有输出没输入，是不正常的
答题技巧 例题1 例题2：</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-13 数据库设计</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/13-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/13-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</guid>
      <description>13 数据库设计 数据库设计过程 ER模型 实体间联系类型 1:1 1:n m:n E-R图向关系模型的转换 实体和联系分别转换为关系，属性转换为关系的属性
数据库设计答题技巧 例题1：
【问题4】
优点：查询操作权限属性时，会减少一次连接操作
缺点：数据冗余
例题2：
答案：</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-14 UML建模</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/14-uml%E5%BB%BA%E6%A8%A1/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/14-uml%E5%BB%BA%E6%A8%A1/</guid>
      <description>14 UML建模 重点：用例图、类图
用例图 包含关系 include
如每次登记外接信息都要【用户登录】，故是包含关系
扩展关系 extend
如每次查询书籍信息不是都要【修改书籍信息】，故是扩展关系
泛化关系
类图与对象图 多重度：
关系：
顺序图 主要考察：
消息：箭头来传递 对象名 活动图 粗横线：产生分支，即并行的线程
还有带泳道的活动图（划分对应的主体）：
状态图 以状态为结点，箭头为触发事件
考点：
填充状态 填充触发事件 通信图 对象：结点；消息：箭头
与顺序图类似，但时间顺序先后不明晰。与顺序图统称为交互图。
例题 例题1 答案：
问题3：类都是音轨，多重度0..1
问题4：
例题2 【问题3】：状态图；属性：clevel；功能：计算里程数</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-15 数据结构及算法应用</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/15-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/15-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8/</guid>
      <description>15 数据结构及算法应用 数据结构基础那章是上午题，此章为下午题
不容易拿高分，但要把容易的都填出来
分治法 递归 概念：运行的过程中调用自己
二分查找 回溯法 贪心法 性价比方法：耗费时间少，找到【可以】的解
图示背包问题贪心法（图b左边）：优先考虑单位价值最多的物品
动态规划法 拆分为子问题，但是子问题一般有关联，所以需要一个表来协助
例题 例题1 答案：
【问题2】：贪心法；贪心法；时间复杂度分析具体代码（O(N^2),O(N^2)）
【问题1】：
例题2 题目略</description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-16 面向对象程序设计</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/16-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/16-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>16 面向对象程序设计 类和派生类的定义 构造函数和析构函数 对象指针与对象引用
虚函数
类的定义 关键字：extends对方就是类而不是接口
接口的定义 关键字：implements 对方就是接口而不是类
例题 例题1 此类定义的填空很好拿分
例题2 </description>
    </item>
    
    <item>
      <title>软考-中级软件设计师-开始</title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/%E5%BC%80%E5%A7%8B/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/%E5%BC%80%E5%A7%8B/</guid>
      <description>开始 视频教程： https://www.bilibili.com/video/BV1yU4y1371J?spm_id_from=333.337.search-card.all.click#/</description>
    </item>
    
    <item>
      <title>部分sql的user_io_wait_time值较大</title>
      <link>http://pipony.github.io/post/workspace/01-tech/database/%E9%83%A8%E5%88%86sql%E7%9A%84user_io_wait_time%E5%80%BC%E8%BE%83%E5%A4%A7/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/database/%E9%83%A8%E5%88%86sql%E7%9A%84user_io_wait_time%E5%80%BC%E8%BE%83%E5%A4%A7/</guid>
      <description>部分sql的user_io_wait_time值较大 背景：报“针对近一个月的sql语句执行进行分析，每天执行较频繁的sql中，有几个sql的user_io_wait_time值较大，建议进行优化
oracle sql 响应时间分析 1、按照IO等待取top5（https://blog.csdn.net/fengsd_sy/article/details/51322766#/）
select * from (select sql_text, sql_id, elapsed_time, cpu_time, user_io_wait_time from sys.v_$sqlarea order by 5 desc) where rownum &amp;lt; 6; 2、根据步骤1获取具体SQL详情
select event, time_waited, owner, object_name, current_file#, current_block# from sys.v_$active_session_history a, sys.dba_objects b where sql_id = &amp;#39;6gvch1xu9ca3g&amp;#39; and a.current_obj# = b.object_id and time_waited &amp;lt;&amp;gt; 0; </description>
    </item>
    
    <item>
      <title>【XD的一周漫步】No.01 Hello World</title>
      <link>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.01-hello-world/</link>
      <pubDate>Sat, 26 Mar 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.01-hello-world/</guid>
      <description>【XD的一周漫步】No.01 Hello World ​	终于拥有了自己的网站，可以写点东西了。计划每周六回顾一下每周自己的状态、新启发、有趣的事等。太久没有写这种长文了，希望这个过程不会很困难😆
本周回顾 状态
由好变坏。前3天保持自律：10:30上床，看半小时kindle睡觉，早上七点多起床。白天状态也算不错。
但是后面几天就不好了，一是晚上不看小说改为看视频了，脑袋处于活跃状态；二是白天状态也不好，烦躁，老刷手机；下午会困，继而发展成头疼，眼睛疼。不清楚是休息不够还是身体问题，下周再观察。
做了啥
域名终于备案通过了。于是火速简单安装wordpress，七牛云（用于markdown图床）域名绑定。 买了软考书，报名。这两个月准备备战软件设计师。 订阅产品沉思录。 学习进度
git，了解基本操作 看github抢hpv疫苗的代码，只看了一点；顺带python学了一点 书与影
正在阅读：
《金色梦乡》 伊坂幸太郎 (作者), 代珂 (译者)
电影：
波斯语课 Persischstunden (2020) ⭐⭐⭐⭐
展望下周 不这么困了，多睡！ 开始准备软考 网站整好看点 工作状态调整好，效率up 碎片化阅读 目前主要的摄入渠道，分为两类：
电脑端长文阅读，主要包括newsletter，订阅，少数派 手机端碎片阅读，主要包括红版报、即刻、豆瓣、小报童 你每日所摄入的东西，一点点影响你自己。我目前还没形成很好的阅读习惯，阅读源的选择也处于不断筛选、进化的过程中。今天只想简单聊一下碎片化时间。
碎片化的阅读到底应该是怎样的，这个问题也在一直探索。短视频以及一些快餐文章，确实填补了我每一次无聊，但我往往在事后感觉不到它们的存在，也就是即使在刚刷完关上手机的一霎那，我也想不起来刚才我所看的东西是什么。不否认也许这些东西是在潜移默化中“充实”我，但我需要这些“充实”吗？这些没有带来一点启发，占据我的休息时间，打碎我的注意力的东西。所以我取关了大多数公众号（因为我发现由于关注太多，推送流里充斥着我不想点进去但却忍不住点进去的boring文章），关闭了朋友圈入口只在每周末定期阅读一次（于我个人来说，平时关闭朋友圈入口真的是我最近做出的最正确的决定），不刷抖音，不看微博&amp;hellip;
这些碎片化的东西，我也并不是都不喜欢的，只是我一直在探索应该将自己的碎片化时间放到哪里是更好的选择。**一方面来说，我想尽量避免碎片化时间。**意味着：上班时能有更高的专注力，尽量避免无谓的刷手机。只有效率提上去了，才能更快做完工作上的东西，才能拥有更多属于自己的时间。**另一方面，在一天中，总会存在碎片时间，怎么利用好也是个问题。**除了刷手机，还可以起来走动，拉伸身体，思考，做一些特意安排在状态不好时间做的事。
其实说了这些浅显的道理，真正实操起来又是另一回事。我只是把最近的一些心得写了出来，勉励警醒自己在接下来的时间更好地践行，希望自己可以早日找到碎片时间的“最佳”去处吧。说到底，并不是需要最大化碎片时间的价值，而是不要被无效且庞大的碎片化时间反噬。
言论 有句话是这么说的：“找到三个爱好：一个让你赚钱，一个让你保持健康，一个让你有创造力。”
赚钱和保持健康的爱好比较好找，有创造力的爱好，必定是很棒的爱好了！
其实剪 B-roll 有时候和电影预告片有些类似，适当「喂不饱」才更吊人胃口 - sspai.com
与电影预告片类比，那我一下子懂了！
第一种运镜方法，是希区柯克导演在电影中常用的方式，故而也被称为「希区柯克变焦运镜」。这种看上去空间扭曲的运镜有个明显的特征：在改变镜头焦距的同时也改变拍摄的距离，从而让拍摄主体在画面的大小和位置都不改变，常常被用来渲染紧张局促的氛围。 - sspai.com
绝了！这不就是闪灵的那个双胞胎镜头！
Last Word 🙏早日摆脱这种白天昏昏欲睡的状态吧！
2022.3.26 ☁️ by.XD</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/01-tech/software-designer/%E8%BD%AF%E8%80%83%E4%B8%AD%E7%BA%A7%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E7%AC%94%E8%AE%B0%E5%AE%8C%E6%95%B4%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/01-tech/software-designer/%E8%BD%AF%E8%80%83%E4%B8%AD%E7%BA%A7%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E7%AC%94%E8%AE%B0%E5%AE%8C%E6%95%B4%E7%89%88/</guid>
      <description>软考-中级软件设计师视频笔记 by huangxd, 2022
总目录 [TOC]
开始 视频教程： https://www.bilibili.com/video/BV1yU4y1371J?spm_id_from=333.337.search-card.all.click#/
00 无分类 海明码（Hamming code） https://www.bilibili.com/video/BV1SJ41157pR?spm_id_from=333.337.search-card.all.click#/
https://www.cnblogs.com/godoforange/p/12003676.html#/
遇到这种题，做题练一下
CRC校验法（循环冗余校验 Cyclic Redundancy Check） https://seedeer.github.io/2022/03/20/crc/#/
https://www.bilibili.com/video/BV1rJ411V7L5?spm_id_from=333.337.search-card.all.click#/
01 计算机组成与体系结构 数据的表示 进制转换 R进制-&amp;gt;十进制：底数，指数
十进制-&amp;gt;R进制：短除法
二进制-&amp;gt;八进制，十六进制
编码 原码：正常转为二进制，位数不足前面补0。最高位为符号位（0正1负） 反码：正数=原码；负数：符号位不动，其他位原码取反 补码：正数=原码；负数：反码+1 移码：一般用来做浮点运算的阶码；符号位为补码的反，其他位一样。这样在数轴上，正数在负数的右边，看起来正常些 ps. 原码：1-1为-2，是不正常的，因此计算机里不能用原版来做加减
移码 https://blog.csdn.net/Desire_Dir_W/article/details/114399797#/
表示范围 为何补码比原/反码多一个数：原/反码有正负0，补码只有一种0的表示
浮点数运算 M*R^e
M：尾数；R：基数：e：指数
对阶（小向大的指数对） - 尾数计算 - 结果格式化（尾数小数点左边是1）
计算机结构 主机=CPU（运算器+控制器）+主存储器
Flynn分类法 单I/多M+指令I/数据D
SISD 现在的机器几乎没有，可能在单片机用到
SIMD 阵列处理机：适合处理数组运算
MISD 只在理论中
MIMD 全面并行
CISC和RICS CISC 比较早期，通常是定制。指令数量多；可变长格式
RICS 复杂操作由简单操作组成即可；定长格式；操作寄存器；硬布线（速度快）
流水线 主要考察计算
周期 概念：执行时间最长的一个步骤时间
n条指令全部执行时间：</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.02-%E4%B8%80%E7%99%BE%E4%B8%AA%E7%BF%BB%E6%9D%A5%E8%A6%86%E5%8E%BB%E7%9A%84%E5%A4%9C%E6%8A%B5%E4%B8%8D%E8%BF%87%E8%87%82%E5%BC%AF%E7%9A%84%E6%B8%A9%E6%9A%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.02-%E4%B8%80%E7%99%BE%E4%B8%AA%E7%BF%BB%E6%9D%A5%E8%A6%86%E5%8E%BB%E7%9A%84%E5%A4%9C%E6%8A%B5%E4%B8%8D%E8%BF%87%E8%87%82%E5%BC%AF%E7%9A%84%E6%B8%A9%E6%9A%96/</guid>
      <description>【XD的一周漫步】No.02 一百个翻来覆去的夜抵不过臂弯的温暖 ​	本周的一大快乐：重新爱上菜市场。线上买菜虽然可以满足懒人的一切需求，但比不上：自己去菜市场挑菜捡肉，经过一个个摊位，让阿姨帮忙切片处理，看着新鲜的肉菜被装到袋子里传递到手中的满足，同时脑中已经勾勒出今晚的菜单。比起线上，线下买菜的另一大好处就是便宜，吃多少买多少，不用为了凑单而凑单。住在菜市场附近，多么幸福呀！
本周回顾 状态
比起上周，昏昏欲睡以至头疼的时候少了（也不是完全都没有），且工作的状态和完成量也好了不少。但是，中断了早睡早起的安排。【原因】：晚上禁不住诱惑，刷手机停不下来，导致晚睡和晚起。有一天晚上甚至到2点才睡！
做了啥
上周日去看了【安迪沃霍尔展】 给网站换了个主题，稍微好看了些 （只）学了一个晚上的软考 看凹凸电波（最喜欢的一个播客节目）六周年直播，买纪念徽章和专辑 学习进度
几乎没有！ 书影音
正在阅读：
《风声》麦家，首次出版于2007年10月
完成阅读：
《金色梦乡》伊坂幸太郎，⭐⭐⭐⭐
电影：
《色，戒 (2007)》李安，⭐⭐⭐⭐⭐
《菊次郎的夏天 菊次郎の夏 (1999)》北野武，⭐⭐⭐⭐
《蝙蝠侠：黑暗骑士崛起 The Dark Knight Rises (2012)》克里斯托弗·诺兰，⭐⭐⭐⭐
歌手推荐：陈婧霏 展望下周 多学软考！！！ 服务器漏洞修复 丰富网站，以及解决网站备案后续 半途而废的心和浅尝即止的新鲜事物 本周，来谈谈我自己的“无法坚持”。
曾经看到一个言论，大意是：规定今年不准学习探索新东西，只专注提高自己已有的能力。首先，我100%赞成这个实践思想；其次，我知道自己100%做不到。因为我：1、在一个洞里坚持刨的耐心没有；2、看到新洞就想扎进去爽一下就跑。于是，我可以看到很多人在属于自己的洞穴里玩得不亦乐乎，而我呢，唯一的栖息地就是不断更换的新的浅洞或是光秃秃的平原。我剩下了什么，无外乎是不会再打开的只更新几页的电子笔记，收藏夹里吃灰的视频和文章，听过但不会/学过但忘了的“理直气壮”。“坚持”从不在我的字典里。
怎么办？改变是痛苦的，坚持改变愈发痛苦。这里列出我的一些小想法，待尝试是否可行：
先给自己一个小目标，如每天只需学习该领域的知识20分钟，等可以了再往上增 每天早上列出3个自己今天一定要完成的事情，并坚持每天完成 设立一定的奖惩机制，比如连续一周坚持住xxx，奖励自己xxx；如果某天没有坚持xxx，罚自己xxx（比如第二天双倍时间等） 每晚睡前，自己总结：为什么今天该做的事没做，下次应该怎么做 接触的新鲜玩意，控制量。可以先放入待办，告诉自己手头上的做好了，再去处理，避免增加半途而废的机会 效果只等时间和努力见分晓，争取在下个月来个初反馈~~
言论 过去的十年里，我搬了六次家，做过十几份工作，交过两三个男朋友。仅此而已，真的只有这些。感觉青春就这样过去了，这让我感到慌张。这些年我发生了哪些变化？好像只是变得大手大脚，对人不再信任，眼光变高，成了俗人。这让我颇为不安。二十多岁的时候，不管我做什么，都感觉只是个过程。现在呢，似乎一切都是结果，让人很焦虑。 - https://www.yuque.com/gaohui-bdaa2/chengbao/urnhdi#/
青春散场，绝大多数变成俗人的我们，仿佛逃脱不掉的魔咒。
智慧不是来自于所发现的事物本身，而是事物之间的关联。为了找到这种关联，你需要广泛地阅读，自由地联想，最好的话，再结合输出的习惯。 - 摘自Newsletter
现代人对信息的摄入永远不缺，甚至乐此不疲地追求用过量的信息填满每一个时间空隙。可以把人们想象成一台输入原料进行生产的机器。有的人输入多，却因为“机器性能（转化率）”不足，产的少；有的人输入不多，却可以以很高的性能转化出去。所以，要优化的是你的处理器，而不是外设。
互联网时代的信息质量，呈现两极化。信息的平均质量变得越来越差，但是你能从网上找到的最有用信息，质量正越来越好。 这就好比一个商品极大丰富的市场，对普通消费者是不利的，因为他不知道怎么选择琳琅满目的商品；但对高水平消费者非常有利，因为他能找到最满足自己需要的商品。 《丰富市场的悖论》 - https://www.ruanyifeng.com/blog/2022/04/weekly-issue-201.html#/comments
这是最好的互联网时代，也是最坏的互联网时代。
据说，猎人会剜去旅鸽的眼珠。看不见的旅鸽失去了飞翔能力，只能不断扇动翅膀原地挣扎。其他同行旅鸽发现后会误认为那是在进食，于是全都聚过来。猎人们只要等候这一刻，一网打尽即可。 - 《金色梦乡》
残忍而有智慧。
如果在纸上画一条直线，代表从大学开始到现在为止的那些岁月，樋口晴子现在的感觉就好像纸对折了，直线的两端连在一起，时光的距离一下子无限缩短，眼前仿佛见到了第一次在社团活动上露面的阿一。- 《金色梦乡》
这件事她早已遗忘，但在阿一的提醒下，记忆的片段又不断地涌了出来，好像有一把钥匙打开了一个柜门，柜子里的东西接二连三地掉落了出来。- 《金色梦乡》
关于时光的比喻。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.03-%E7%9C%BC%E7%9C%8B%E4%B8%96%E7%95%8C%E5%8F%98%E5%BE%97%E8%B6%8A%E6%9D%A5%E8%B6%8A%E7%B3%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.03-%E7%9C%BC%E7%9C%8B%E4%B8%96%E7%95%8C%E5%8F%98%E5%BE%97%E8%B6%8A%E6%9D%A5%E8%B6%8A%E7%B3%9F/</guid>
      <description>【XD的一周漫步】No.03 呱呱呱 本周回顾 状态
这周更加偏离【早睡早起】的作息了。但是工作状态不错，毕竟本周只需工作三天。头疼的状态也没有出现，真棒！希望下周可以回归早睡，我需要自控力！I NEED SELF-CONTROL POWER💪!
做了啥
发现了一个日常背单词的好东西【喵喵机墨水屏电子单词卡】（被https://sspai.com/post/72523安利到了），速速买来，准备每天工作间隙背一背 终于搞清楚了为啥电脑上打开自己的网站，放在七牛云上的图片无法显示：先是拨打了七牛云客服电话，被告知可以提【工单】说明具体情况（土鳖如我，第一次知道）；后面被告知是因为我的网站是https协议，但我在七牛云上绑定的是http，并被告知“由于浏览器端 安全策略问题，目前Chrome、火狐等浏览器默认会将https协议网站内置http协议URL强制升级为https发起访问，这是浏览器端的处理策略，七牛侧无法控制。”。所以我只能将七牛云绑定的域名升级为https【下周待做】 洗晒换季被子，天气热了 学习进度
无 😢 反思时间：看了上周的【一周漫步】，关于“展望下周”模块的三个事，一个都没做到！ 书与影
正在阅读：
《N号房追踪记》 追踪团火花 (作者), 叶蕾蕾 (译者)
完成阅读：
《风声》 麦家，⭐⭐⭐⭐
电影：
《无敌破坏王 Wreck-It Ralph (2012)》 ⭐⭐⭐⭐
《无敌破坏王2：大闹互联网 Ralph Breaks the Internet (2018)》 ⭐⭐⭐⭐
展望下周 升级七牛云绑定域名http-&amp;gt;https 球球了！下周一定要学软考！ 好好写代码！下周work任务多！ 言论 计算机使用能量进行计算，那么能不能反过来，使用计算来储存能量？ 这是可以做到的，让信息变成电池。电力便宜时提前执行某些耗时的计算，并将结果缓存；电力昂贵时，再使用这些计算结果。 &amp;ndash; 《错时计算节省机房成本》 - https://www.ruanyifeng.com/blog/2022/04/weekly-issue-202.html#/
让信息变成电池，听起来不可思议吧。惊叹于每一个巧妙的思路。
我们完成了一次公式，就进入了一个新的舒适区，我们再完成一次，又形成了新的平衡。我们不断扩大自己舒适区的面积，变得越来越有学识，能解决越来越多的问题，也许运气好，可以获得超额或意外的回报。
我们的生活，被一次一次平衡填满，直到生命结束。我甚至可以再写出一个公式。定义生命的视角有太多种，我只能说，我不喜欢终身学习这一种，更讨厌躺平那一种。 我们不能忘记时间的力量，不能忘记经验的力量，甚至不能忘记父母给予的资本和帮助的力量。
我见过太多人，不是终身学习，而是在终身折磨自己，试图打破舒适区，忘记了舒适区其实是一种平衡。 在舒适区里生活，向舒适区外挑战。大多数人，可能都弄反了。 - 摘自newsletter
说的真好。舒适区不是一成不变的，它是平衡，它会扩大。近段时间，【舒适圈】似乎被妖魔化了，待在【舒适圈】被等同于不求上进。为何一定要追求跳出舒适圈去遍体鳞伤甚至失去斗志呢，我就待在【舒适圈】，把头探出去嗅嗅外面的世界，有保留地挑战自己，稳中求进，何尝不是一种好策略呢？
某支爱斯基摩人有这样的习俗，谁要是生气，就让他带一根树枝到雪地上走一直线，以消解怒气，一直走到在心灵上获得平静的那个点上，插上树枝——以见证愤怒的力度和长度。(by 梁文道为《走路的历史》作序) - 摘自newsletter
插在雪地的树枝，见证愤怒的力度和长度。听惯了物化表现心灵“好”的一面（诸如爱情，浪漫，喜悦），将愤怒用树枝表现，读来惊喜。
当他在微博提问：「你有多久没有体验过那种一觉醒来，充满着活力和期待完成一天事务的感觉？」许多人感觉被击中了。 - mp.weixin.qq.com
我也被击中了。
韩裔德国哲学家韩炳哲在《倦怠社会》一书中提出这样的观点，21世纪的社会不再是一个规训社会，而是功绩社会。功绩社会充满积极的口号，它看似自由，却让人们在过度的积极性中自我剥削，直至精疲力尽，感到疲累和抑郁。 - mp.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.04-%E4%B8%80%E7%9B%B4%E5%9C%A8%E8%B7%AF%E4%B8%8A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.04-%E4%B8%80%E7%9B%B4%E5%9C%A8%E8%B7%AF%E4%B8%8A/</guid>
      <description>【XD的一周漫步】No.04 一直在路上 ​	下周三就是本打工人一周年了。我熟悉和进步了很多，但也常常能感觉到能力不足，有很多需要学习的地方。工作一年了，就不能算是新手了。希望自己在工作中可以提高效率，少犯错，找到自己的价值。虽然很“官话”，但也是对自己的真实期许。一直在路上，不要停下脚步。
本周回顾 状态
本周是忙得团团转的一周。紧张的工作需求，加上下个月的软考压力，像两座大山一直压着我。每天白天我一直处于高压状态，努力码代码，几乎没机会看手机。晚上加班后，仍然想学一会儿软考，但再怎么不浪费时间，也只有大概半小时的学习时间。**感觉有些窒息。**但周三状态就明显疲软了，到了晚上就没劲了。后面两天也是好好工作，但没精力学习软考了。说真的，很累。但是这两件事都是无法推迟的事情，即使我想慢慢来，时间也不允许。加油，熬过这段时间，XD。
做了啥
努力工作 学了一点软考 学习进度
只学了一点软考 书与影
正在阅读：
《你的夏天还好吗？》，金爱烂 (作者), 薛舟 (译者)，出版2016
完成阅读：
《N号房追踪记》，作者: [韩]追踪团火花，出版2022 ⭐⭐⭐⭐
电影和电视剧：
《后天 The Day After Tomorrow (2004)》 ⭐⭐⭐⭐
《猎罪图鉴 (2022)》 ⭐⭐⭐⭐
展望下周 希望自己压力不要这么大，相信自己能一步步做完💝。 言论 十年前，2011年3月11日，日本经历了一次集体性社会创伤——9.0级特大地震、巨大海啸、核泄漏。这三重伤害超过“天灾”的范畴，在现今的日本仍留下了难以磨灭的后遗症。 这十年，在无数日剧、电影、文学、非虚构写作里，也总是能看到东日本大地震的影子。但人们很少直呼其名，要么是主人公把日历翻到了3月11日，要么是镜头里的建筑物在剧烈颤抖，然后旁白缓缓开始叙述说——「あの日」（那天）。 日本人不会直呼其名。他们不像美国人，每年秋天那一天，在双子塔曾经矗立的地方亮起高耸入云的灯；也不像中国人，用默哀鸣笛防空警报等仪式纪念灾难中逝去的亡魂。日本民族性中的隐忍、自制，让他们把巨大的悲痛融入了这短短的三个字，这是一种克制的默契与心领神会。 - 链接
关于一个民族的集体创伤和沉默。
每个人的身体里都有一个神，但当你没有将自己全然贯注于此刻的时候，这个神就会离开你，自己走掉。这个过程就叫走神。 - mp.weixin.qq.com
看好你体内的那个神吧（笑）。
相信大数定律。一件事哪怕只有 10% 的把握，连试 20 次之后成功率也有九成 - mp.weixin.qq.com
这个时代还算不算，努力虽然不一定都能发光，但持续努力的话，你的光芒很可能就遮不住了。
我这几天没睡着，一幕幕的就像放电影一样，都在我心里面啊。她很小的时候，几个月大，我骑自行车，她坐在我自行车后面，带到外婆家去啊，到公园去啊什么的。她坐在后面打瞌睡了。后来去学校，背语文书啊，有时候她不用心，背不出来。然后我脾气一发，她马上读两遍就背出来了，很聪明的。但现在我连女儿最后一面也没见到，这么残忍。 - mp.weixin.qq.com
前阵子因为在微博上感恩辛苦帮忙送餐给自己父亲的外卖员，却遭到网暴的女孩，跳楼自杀了。看到这篇文章时，我感到很恍惚，为什么又是一个因为网暴而离世的人，为什么这些键盘侠可以这样恶意揣测，质问，煽动，跟风去曲解一件完全没错的事情，为什么。
工具傍身，应该如有私人助理一样轻松舒适。 这是我所理解的，一种朴素的「信息极简」。- view.inews.qq.com
文中以“私人助理”来比喻最让人舒服的信息管理方式。也许我们大多数人没法聘请私人助理帮我们打理一切，但可以磨练出最适合自己的信息流及日常计划方式。
Counterpart 里，三十年前开始分叉的不同平行世界的同一个男人第一次面对面坐着。他问，为什么我们会那么不同？你看起来那么自信，我那么颓废，你升职了我在这止步不前，我们娶的或没娶的人不同，我们喜欢的食物不同、音乐不同，你有胆固醇我不知道自己有没有。
另一个人回答：别想了，很多人因为想这个而想疯了。这就是最 fucked up 的地方，基因、童年，这些居然都不重要。我们都对自己的经历束手无策。你和我的区别可能仅仅在于一小个瞬间，仅仅因为一件小事你做错了或者做对了。 - mp.weixin.qq.com</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.05-%E5%8E%8B%E5%80%92%E7%A8%BB%E8%8D%89%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%8C%B9%E9%AA%86%E9%A9%BC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.05-%E5%8E%8B%E5%80%92%E7%A8%BB%E8%8D%89%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%8C%B9%E9%AA%86%E9%A9%BC/</guid>
      <description>【XD的一周漫步】No.05 压倒稻草的最后一匹骆驼 ​	上周末因为补班了一天，就搁置了。故本次的一周漫步，其实是两周漫步😛。今天是五一假期的第一天，我发4️⃣，这五天要好好学软考，好好生活，好好快乐！！！
本周回顾 状态
这两周的状态，还是感觉压力大，心累。感觉自己抗压能力还是很弱。但也一直在调整心态，在自己能力还不够的情况下，先做到与压力共存，后续逐渐化压力为动力。我认为，自己还是没有找到正确的工作方式，工作安排也不够好，工作能力也不够好，所以会有点力不从心的感觉。我想要的是那种游刃有余，“完美”安排好自己的时间，工作生活两不误的理想状态，这也是我一直努力的目标。总之，我不希望自己操之过急，毕竟要给自己成长的时间和机会，只要是一直向前的，就是对的。
另外，不知道为啥，最近早上很嗜睡，起床都很困难🤦。
做了啥
写季度工作个人总结 网站加了两张专辑Playlist 网站加了吃过的部分店评分 解决关于网站之前遗留的问题 学习进度
几乎没有🤔 书与影
正在阅读：
《贪婪的多巴胺》，(美) 丹尼尔·利伯曼 / [(美) 迈克 尔·E.朗](https://book.douban.com/search/迈克 尔·E.朗)，出版2021
完成阅读：
《你的夏天还好吗？》，金爱烂 (作者), 薛舟 (译者)，出版2016 ⭐⭐⭐⭐⭐
《夏天、烟火和我的尸体》， [日] 乙一，出版2019 ⭐⭐⭐⭐
电影：
《绅士杰克 第一季 Gentleman Jack Season 1 (2019) 》 ⭐⭐⭐⭐⭐
《杀死伊芙 第四季 Killing Eve Season 4 (2022)》 ⭐⭐⭐
展望下周 下班时间多放点精力在软考上，这个月其他东西可以先放一放 工作上，需求抓紧完成 言论 我们的时间很宝贵，不要用于那些改变不了的事情，而要用于你能够改变的事情。一位美国神学家曾经写过一段著名的祈祷文：“请赐予我力量，全力改变那些可以改变的事情，平静接受那些无能为力的事情，拥有智慧区分这两者。” - www.ruanyifeng.com
认清自己和现实
你要知道，你的头脑，你的内心，不是酒店的厨房，可以把里面的东西像旧罐头一样扔掉。它更像是一条河流，每时每刻都在流动和变化。你无法矫直一条河流。 - www.yuque.com
和自己共处，接受自己，也接受自己的变化
我总觉得阅读和写作应该是个简单的循环游戏，如果你要写出点什么，要么在生活中碰到什么，所以你写下来，要么灵光一闪，被灵感砸中于是写点什么，要么就是你不停找点什么来读，然后写点什么。所以，就是生活、阅读、写作。嗯，应该就是这么简单才对，要继续生活，生活、生活、生存、生活、生存、生活、生存、生活，最后在一些间隙里，阅读和写作。 - 摘自Newsletter
阅读，补充自己；写作，充实自己。我们中的绝大多数人无法将这两件事作为生存和生活的途径，但可以作为间隙中的一点喘息
尽管本科阶段的学费贷款还没还清，然而恩智始终坚信，促使人生前进的不是忧愁，而是胆魄。克服恐惧最好的方式就是蔑视恐惧。她常常背诵这句咒语，尽管自己也不相信。 - 《你的夏天还好吗？》</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.06-%E5%A5%BD%E4%B9%85%E4%B8%8D%E8%A7%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.06-%E5%A5%BD%E4%B9%85%E4%B8%8D%E8%A7%81/</guid>
      <description>【XD的一周漫步】No.06 好久不见 ​	或许我应该把标题改为【XD的四周漫步】:） 没错，整个五月我都没更新文章了，现在回来了。所以我的一周漫步，好久不见。
上月回顾 状态
五月，可以用忙碌和变动来形容。这也是我这个月没有写一篇文章的原因——很累，身心俱疲。六月虽然也忙，但总算能喘口气。前两天看过一篇文章，大概是一个事业有成的企业家尝试最艰难的“底层”生活，住在一个卫生间大小的出租屋，干着累且收入微薄的体力工作。在开始之前，他设想自己可以在这种生活下也能保持自我理想和冲劲，但真正体验后，才发现他的唯一愿望已变成了吃上一口可口的饭菜。人的精力和体力都是有限的，即使你设想的自己可以多么自律多么保持进步，但当白天的高节奏工作消耗掉大部分夜晚存储的能量后：自律no，勤勉no，诗和远方nonono。这也是我最近和自己和解的一个观点：不要因为没实现自己的预期而沮丧或焦虑，认识到自己的极限，不要Overtake。
做了啥
参加软考（太忙了没准备好，先去体验一次） 去福大学生街看了看（托软考的福） 搬家（买了很多适配新家的东西，收拾打扫） 工作忙于开发一个需求 年终退税（居然还能退回一千多） 用Hugo+GitHub搞了静态网站，用于写技术文章 学习进度
几乎没有，这个月太忙了 书与影
这个月太忙，几乎没有书影音🙂
展望下周 开发交易，改bug 调整作息，别让自己太累了 悲凉的底色 马东说他的人生底色是悲凉的。我想我们都是如此，只是有的人淡一点，有的人浓一点。我们已经看过很多讨论人生的言论，有人说人生就是要享受每一天活下来的馈赠；有人说人生来疾苦；有人说开心也是一天难过也是一天所以何不选择快乐呢；有人说只有痛苦才是人生。
有时候我会想，人是否就只有这一生。在你有幸能够呼吸的这几十年，是否就是你的全部？你的脑子，你的思想，你的情感，你的所有组成你的部分，都会随着呼吸停止的一刻而罢工或消失吗？我觉得这很可怕，因为我想象不到「我没了」是什么概念。
在这个浩瀚宇宙中，我们是怎样的存在呢？有没有可能，我们认为的浩瀚宇宙，只是真实宇宙的一个小点？我们是完全自主的高级智慧生物吗，亦或是未知的超生命体的一个卑微产物？我们太无知，太局限了。
与这些相比起来，人生？只不过是一个渺小的人的几十年留下的一点痕迹罢了。就像我们认为五分钟很短，一天很长；人生也很短，从人类历史的长河看；人类历史也很短，从无限的未知看。
偶尔，我会这种空而大的思考，就像现在。我常常关注的是今天明天我要做什么，很少想到今年我要完成什么。我很想跳脱出来，指导自己做事，如鱼得水地处理工作和生活。我觉得我太陷在我的生活中了，很少有反思和鞭策，我想改变自己，但总觉得缺了些什么。是动力、决心吗？不知道。
这算是我的思考碎碎念吧，没有主题，单纯就是把脑中的一些想法打出来，我感觉我会舒服很多，这就够了。
言论 不管是过去还是现在，传记最吸引我的一点是，书中的人物在自己生命的初期，也就是前五十页当中，是不会知道他或者是她会在第三百页的时候取得的成功。他们并不知道将会出现在自己面前的伟大。仔细想想这点吧，这是对你们自己未来的生活保持乐观的一个极好理由。你们所有人都仅仅在自己那本传记的前五十页，还有几百页的路要走。 - 摘自Newsletter（富于理性）
对自己的最好幻想是：希望未来的自己会感激现在的自己，希望现在的自己不要让未来的自己懊恼和伤心。
当你老了，回顾一生，就会发觉：什么时候出国读书、什么时候决定做第一份职业、何时选定了对象而恋爱、什么时候结婚，其实都是命运的巨变。只是当时站在三岔路口，眼见风云千樯，你作出抉择的那一日，在日记上，相当的沉闷和平凡，当时还以为是生命中普通的一天。（来自于《杀鹌鹑的少女》） - 摘自Newsletter（事不过三）
人生真像一场只能玩一次的游戏呀。
客气、中庸、骑墙也许可以保护自己，避免冲突。但是只有确信与坚持，才是职业和勇气的表现。团队需要一个有担当的领导，家庭需要一个负起责任的主心骨，社群需要敢于说出真相的人。 - 摘自Newsletter（happy xiao）
作者举了两个故事的例子：1、一个不教客户摆pose的摄影师（“他都是客气地说，随你们就好”）被认为是不专业的；2、一个遇到极端天气的机长坚持自己的判断，拒绝指示台的命令，避开了危险。在很多专业领域，都要用自己的声音，而且要响亮。
关于人类的梦境，这里有一个很有意思的研究，对于梦的进化意义提出了过适大脑假说（overfitting brain hypothesis）。这个假说的提出源于科学家在对深度神经网络的研究中发现，如果一个网络一直处理同一组数据，就有可能造成网络过于精密地匹配到现有数据，而无法对未来做出预测和概括，无法generalize，所以数据科学家就需要对该网络进行人为的“噪声注入”。这篇论文的作者认为人的大脑也具有类似特性，因为日常生活中处理的信息有可能是非常重复和固定的，所以大脑需要通过梦境的方式来输入一些新鲜奇特，不同寻常的数据，来增加大脑神经网络的概括和预测能力。以及，我们对大脑的理解，真是和时代的技术发展并行的，这些假说来源于计算机和算法研究，在此之前的时代人类应该不太能拥有这种视角。 - 摘自Newsletter（Steve说每周通讯）
这里面的两个观点都很多意思。一是大脑为了激活大脑，通过奇特的梦境来提高大脑神经网络的概括和预测能力；二是，人的认知随着技术思维的发展，也会更加开阔。
有个护工跟朋友说自己总能见到孙俪，朋友说不要吹牛。他有一天终于鼓起勇气开口，希望孙俪和他拍张合影，穿上了自己最干净的蓝衬衣。拍好照片后，孙俪大喊：你赶紧去证明自己！ - mp.weixin.qq.com
哈哈，这里的孙俪好可爱！
这10年里，孙俪见过了太多人在那儿来来往往，今天去，他还在，下次去，人就没了。「在那个医院你只能看到很多无常，看到生死，看到人最无奈的状态，你根本不知道人生下一秒发生什么。所以不要做那么多事业规划，没有用的，就过好当时当刻就可以了。**我就会特别珍惜我自己还能直立行走，还能用语言表达，还能独立思考，还能享受自然空气，享受美食，看到这美景。我觉得这就够了，已经是天下最幸福的事了，真的，没有过多的奢求。**所以我就很珍惜每一天，也很珍惜我拍的每一个作品，每个作品都当成最后一部作品拍。我也不知道这叫乐观，还是悲观。我觉得我挺会安在当下的，经常会想到，我每一天都当最后一天过。」 - mp.weixin.qq.com
看了这篇文章，才知道孙俪是一个极度自律和极度认真的演员。和邓超简直是互补的性格。珍惜当下，虽然已经是烂大街的标语了，但我觉得孙俪应该是有在好好践行。
在中国十几年，2010年左右，拿着相机在路上并不会引起任何人的惊讶：无论是拍摄路上的行人、老弄堂、拆迁的工地，还是在最繁忙的商业街，顶多会引人多看一眼。大概从 2018 年起，尤其是疫情之后，我带着相机，哪怕什么都没有做，总有保安过来问我在拍什么、我是哪里人、为什么要拍摄，有时候甚至被呵斥、赶走。曾经与保安、年长的居民畅快闲聊，听他们自豪地讲述背后建筑的零星历史和故事——这样的经历已经消失了。2022 年初，因为商业项目我去了济南，工作结束后，在济南的火车站，当我拿出相机准备拍摄新盖好的车站建筑时，被保安拦住。他抓着我的胳膊，冲对讲机说着什么（我没听懂）。之后来了两个警察。那个保安情绪很激动，对警察说着什么，我只听到了「美国间谍」四个字，围观的人开始越来越多。警察看了我的护照，了解到我不是美国人，让我删除了照片之后就放我走了。这件事对我的冲击很大。为什么我会被当作「美国间谍」？分不清白人的国籍我还能理解，但「间谍」？ - mp.weixin.qq.com
一个在中国生活了十几年的白人，在离开上海之前的自述。虽然没有亲身经历，但对于这种变化在这些年其实也能捕捉到。疫情，国际关系，人们之间的隔墙、言论等原因，使得以「开放」闻名的上海人是也人非。
基辛格说：“权力是最好的春药。”但是研究表明，权力似乎也是一剂毒药，会给位高权重的人带来脑损伤。历史学家亨利·亚当斯说：“权力是一种以杀死患者的同情心终结的肿瘤。”《大西洋月刊》的一篇文章聚焦了权力对大脑和认知能力的不良影响——糟糕的是目前似乎还没有治愈的手段。 - 36kr.com
权力会扼杀同理心？原来这真有医学依据。
《焚书》
当那个政权下达命令，公开烧掉包含</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.07-null/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.07-null/</guid>
      <description>【XD的一周漫步】No.07 Null ​	延续忙碌的五月，这周过的也是非常枯燥。被忙碌的工作塞满了时间，一周加了四天班，回家后只剩下疲倦。所以，回想起过去的一周，脑袋空空，只想用null来形容，也就是本周的标题。本来想想这周就不写了，但是又想到没内容的一周也是一周，也记录下吧。
本周回顾 状态
如前言，不赘述。
做了啥
work 将新搬来的家收拾清楚了 公司搬家 旧租处的水电费等结算清楚 学习进度
无 书与影
正在阅读：无
完成阅读：无
电影：无
展望下周 没别的奢求，把最近的工作做清楚就好 言论 很多可怕的事情都可以被称为「百年一遇」。 百年一遇的事件并不意味着它每 100 年都会发生。它意味着在任何一年都有 1% 的机会发生。这似乎很低。但是，当有数百个不同的独立的 100 年事件时，其中一个会在某一年发生的几率是多少？相当高。 如果明年有 1% 的机会发生新的全球疫情，1% 的机会发生经济萧条，1% 的机会发生洪灾，1%的机会发生政治崩溃等等，那么明年——或任何一年——发生坏事的几率是&amp;hellip;&amp;hellip;不低。 - 摘自Newsletter（Shyrism.News）
重新认识【百年一遇】
——不要让黑夜成为所有女孩的噩梦 https://mp.weixin.qq.com/s/viYyBpF8-QiZsIi_G0KgiA#/
酷热的夏天想要穿上漂亮又凉爽的吊带连衣裙，但是一想到地铁上恼人的目光，还是换上了T恤和牛仔裤； 加班到很晚叫车回家，尽管很困还是强打精神，坐在后排警惕司机的一举一动； 半夜回到小区，避开幽暗的小路，绕远走有路灯的地方，看到昏暗的楼梯间和虚掩的门立马神经紧绷，加快脚步一路小跑直到回到家锁上门； 好不容易到了周末与朋友聚会，也不敢玩到太晚，到家后不忘掏出手机给朋友发一条报平安的微信&amp;hellip;&amp;hellip;
这些细节都是犯罪学中典型的受害焦虑的表现——情绪或行动上对于犯罪或与犯罪关联的现象产生的畏惧或焦虑反应。 - mp.weixin.qq.com
真的，每个场景都感同身受。请把黑夜还给女性。
“厅局风”潮流之所以能够异军突起，碾压日潮美潮等，都是年轻人在疫情的背景下和生活提取的最大公约数，是妥协的产物。 当缺乏安全感时，人们就会趋向于保守，在安全和冒险的选择中，人们会不自觉的寻求安全，就连就连乐队的主唱，也找了一份安定工作，当了保安，没有什么可挣扎的。 - mp.weixin.qq.com
emmmm&amp;hellip;
听过很多道理，依然过不好一生 摘自本周看过的那些大小“道理”，希望可以【稍微】过好这一生吧
要爱具体的人，不要爱抽象的人；要爱生活本身，胜于爱生活的意义。 Last Word 因为某些原因，决定接下来都要健康生活，少出去吃，不熬夜，坚持锻炼更好。自勉🐝。
2022.06.12 ☁️ by.XD</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.08-%E5%8A%A0%E5%BF%AB%E8%84%9A%E6%AD%A5%E5%B9%B4%E8%BD%BB%E4%BA%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.08-%E5%8A%A0%E5%BF%AB%E8%84%9A%E6%AD%A5%E5%B9%B4%E8%BD%BB%E4%BA%BA/</guid>
      <description>【XD的一周漫步】No.08 加快脚步年轻人! ​	没想到我又三周没写了！
本周回顾 状态
最近的状态大概就是浮躁吧，发生了一些事，有了一些新感悟。虽然是工作的事情不便在这边说，但结论就是更深刻地感受到时不待我，要加紧时间努力向上，化被动为主动。
做了啥
去宜家买了新书桌，稳定的桌子的快乐 买了iMac，还未到货 这周开始养成早睡早起的作息，早上上班前可以有一个小时学习 买了竖屏显示器，双屏的快乐 买了折叠床，中午可以躺下的快乐 学习进度
最近开始看鸟哥的Linux基础书 书与影
电影/电视剧：
瞬息全宇宙 Everything Everywhere All at Once (2022) ⭐⭐⭐⭐⭐
无人知晓 誰も知らない (2004) ⭐⭐⭐⭐⭐
异物志 (2022) ⭐⭐⭐⭐
幽灵公主 もののけ姫 (1997) ⭐⭐⭐⭐⭐
小武 (1998) ⭐⭐⭐⭐
展望下周 好好学习 充实、坦然 言论 谈恋爱就像在高速路上开车，有很多个出口，有的人会在下一个出口下车，有的可以陪你开很久后才下车，但只有一个会陪你一直开到尽头 - 《老爸老妈浪漫史》
人生就像没有回头路的高速路，你必须一直一直开，就算有时候你累了，在休息区休息了一晚，第二天仍然得继续出发。小时候，父母驾驶着家庭这辆车；长大后，你就要渐渐掌握方向盘了，别说你不会开车，没有人生下来就会。幸运的话，你可以一路无阻地驶向终点，但大部分人小则遭遇抛锚，或驶错分岔口，甚至有场车祸等着TA。珍惜你脚下的车、眼前的路、身边的人。一点无关谈恋爱的高速路感想。
稳定高自尊的人，看起来简单、自然、真实，成功的时候会开心，失败的时候也不掩饰难过。被表扬的时候就感谢对方，被批评的时候就想想对方有没有道理，就事论事，不会因此而否定自己或者埋怨别人，别人跟他相处也愉快。 - 摘自Newsletter（事不过三）
自勉
没挤上公交前，我认为每个人都可以再挪一下给我一个空间；一旦上了公交车，我就嫌弃每一个想要上车的人。 - mp.weixin.qq.com
一篇关于今年上海疫情封闭时期的观察想法，关于人性的复杂性的讨论。
大裁员那段时间，整个 HR 团队是比较丧的，或者说压抑。我自己做这一行太多年了，面对员工可以保持淡定，但当你回到家或者周末，那种情绪是会影响你。它不是那种激烈的，不像有的人回家就大哭一场，我是过一段时间才发现，我那时情绪特别差，对什么都不感兴趣，我知道自己的情绪已经不健康了。 负面情绪一方面是来自于，做我们这行肯定都懂法，但有时候做的东西又不完全按法；你明知道这个事不对，你没有立场去做这个事，你只不过是欺负员工不懂法，或者欺负员工没选择。 - www.myzaker.com
从HR的角度了解今年的大厂裁员浪潮，砍掉的是数字，背后关乎的不仅是每一个直接被裁掉的员工故事，也是在这场裁员中的直接执行者HR的挣扎。
这跟80年代的画风完全不同。仅在几年前，日本人还想要买下整个世界，伦敦和纽约的奢侈品店挤满了日本富人，而即使是再普通的工薪阶层，也敢按揭30年购买一套价格堪比纽约的公寓或一户建。整个国家大病一场后，所有人的预期都变了。
村上春树在《海边的卡夫卡》里写道：从沙尘暴中逃出的你，已不再是跨入沙尘暴时的你。 - mp.weixin.qq.com
每5个韩国年轻人里，就有1个在炒币 - m.huxiu.com
把这两篇放在一起看，因为日本和韩国曾经都有自己的鼎盛时期（其实现在也不赖），现在的境遇却引人深思。年轻人的发展空间和努力回报率已被大大缩减了。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.09-%E5%B0%B1%E5%A5%BD%E5%A5%BD%E7%94%9F%E6%B4%BB%E5%90%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.09-%E5%B0%B1%E5%A5%BD%E5%A5%BD%E7%94%9F%E6%B4%BB%E5%90%A7/</guid>
      <description>【XD的一周漫步】No.09 就好好生活吧 ​	其实很多时候我都不知道要写啥东西，表达欲缺缺，也没有想发表观点的事件，大多只是输入别人的看法，但也对热点事件越来越不关心了。有时在想这是不是失去年轻的“热情”的一种表现，一种心累的表现，这很可怕，因为我现在的年龄不应该正是关心大众，表达一切的时候吗！WAKE UP!
本周回顾 状态
被公司新出的考核制度“伤透”了心，也逐渐意识到工作再怎么干，也是为别人做的，你真正获得的是自己的进步。所以我这两周就几乎不加班了，抓紧事件自学。我也深刻意识到自己现在的知识储备有多被动，多么需要被扭转。Anyway，最近需求也没有很紧张了，我也在找时间学习了，所以目前一切还可以。但是可能这两周刚开始作息早睡早起，所以有几天的下午感到很疲倦。
做了啥
周六仔仔她们来家里玩了 学习进度
这两周《鸟哥的Linux私房菜 基础学习篇》看了1/3 Redis看视频浅学了些 书与影
电影：
真爱至上 Love Actually (2003) ⭐⭐⭐⭐
十二猴子 Twelve Monkeys (1995) ⭐⭐⭐⭐⭐
展望下周 继续自我学习 早睡（划重点） 言论 无
听过很多道理，依然过不好一生 摘自本周看过的那些大小“道理”，希望可以【稍微】过好这一生吧
无
Last Word 热啊 最近最高温39°，白天出门会变得不幸！
2022.07.10 ☀ by.XD</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.xx-%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/02-life/02a-weekly-letter/xd%E7%9A%84%E4%B8%80%E5%91%A8%E6%BC%AB%E6%AD%A5no.xx-%E6%A8%A1%E6%9D%BF/</guid>
      <description>【XD的一周漫步】No.xx 模板 ​	xxx
本周回顾 状态
xxx
做了啥
xx 学习进度
xx 书与影
正在阅读：⭐⭐⭐⭐
xxx
完成阅读： 电影：
xx
展望下周 xx 主题1 xx
言论 xx
xx
听过很多道理，依然过不好一生 摘自本周看过的那些大小“道理”，希望可以【稍微】过好这一生吧
Last Word xx
yyyy.mm.dd ☁️ by.XD</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03d-poem/%E6%97%B6%E4%BB%A3%E7%9A%84%E7%9C%BC%E6%B3%AA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03d-poem/%E6%97%B6%E4%BB%A3%E7%9A%84%E7%9C%BC%E6%B3%AA/</guid>
      <description>迫切的需要 对自我知识库 贫乏、无聊、杂乱 整理
网易博客 抱歉 我几乎把你忘掉 抱歉 六七年前的自己 我快把你的 脆弱、敏感、有趣 忘掉
我看到了诗 其实称不上诗 长短句 称得上吧 当时的我 把这些句子取名叫 湿 听起来就很色情
时代的眼泪 就像是 现在的我 再也写不出 当年的湿</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/cook-book/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/cook-book/</guid>
      <description>Cook-Book </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/cookbook-%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/cookbook-%E6%A8%A1%E6%9D%BF/</guid>
      <description>cookbook模板 参考教程：xxx
好吃指数：⭐⭐⭐
难易指数：💦
准备 食材 调料 步骤👩‍🍳 PLUS😋 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E5%8D%A4%E9%B8%A1%E7%88%AA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E5%8D%A4%E9%B8%A1%E7%88%AA/</guid>
      <description>卤鸡爪 参考教程：https://www.xiachufang.com/recipe/104726387
好吃指数：⭐⭐⭐⭐
难易指数：💦💦💦
准备 食材 调料 鸡爪（10个） 八角（2.5个） 五花肉（250g） 香叶（3片） 鹌鹑蛋 桂皮（不到半个） 干辣椒（1个） 花椒（15粒） 姜片（2片） 冰糖（不要太大块，大概一勺） 料酒（3勺） 生抽（4勺）、老抽（3勺） 步骤👩‍🍳 泡鸡爪去血水 焯水煮鸡爪和五花肉（放姜片和料酒），鸡爪8分钟，五花肉5分钟 鹌鹑蛋煮熟，剥壳 开卤 加所有食材和配料，水没过食材 大火煮开，转中小火煮，共45分钟 中途记得搅动 出锅 PLUS😋 五花肉的肥肉比较油腻，不推荐用此方法煮 鹌鹑蛋很入味，推荐！！！ 45分钟鸡爪已经软烂了，赞 冰糖不要加太多，不然会太甜 此方法不用炒糖色，比较容易 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E5%8F%A3%E8%98%91%E7%B1%B3%E7%B2%89%E6%B1%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E5%8F%A3%E8%98%91%E7%B1%B3%E7%B2%89%E6%B1%A4/</guid>
      <description>口蘑米粉汤 参考教程：https://www.xiachufang.com/recipe/106432832/
好吃指数：⭐⭐⭐
难易指数：💦
准备 食材 调料 口蘑 葱 米粉（一人吃：半块） 香菜 魔芋丝 步骤👩‍🍳 洗口蘑
去掉根部（不要丢弃），洗 煎（小火）
油不要太多，不然汤会油 把口蘑开口朝上煎，煎一会放口蘑根部一起，口蘑软了后用铲子一份为二 多煎一会 煮（中小火）
加冷水煮（⌛切葱和香菜，洗魔芋丝） 沸腾后加魔芋丝，加盐（可以多点），生抽（如果需要的话） 快出锅前加米粉，煮2分钟大概 加葱和香菜，出锅 PLUS😋 想吃鲜掉眉毛的口蘑汤，又不想煮饭，于是自己加了米粉。本来怕汤味道太浓，后面感觉还是蛮淡的，蛮正好（下次盐可以多加点）。 汤的鲜度不是很出色，但是口蘑本身吃起来的鲜度太棒了！ 用的是雪平锅煎口蘑，一直开小火，不会焦掉。因为口蘑自己会出水。 香菜和葱，有还是一定要加的。 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E5%9C%9F%E8%B1%86%E8%82%A5%E7%89%9B%E6%B5%87%E5%A4%B4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E5%9C%9F%E8%B1%86%E8%82%A5%E7%89%9B%E6%B5%87%E5%A4%B4/</guid>
      <description>土豆肥牛浇头 参考教程：https://www.xiachufang.com/recipe/106616303/
好吃指数：⭐⭐⭐⭐
难易指数：💦💦
​ 准备 食材 调料 肥牛（半包） 生&amp;amp;老抽 土豆 x 1 耗油 番茄 x 1 盐 洋葱 x 1 淀粉 胡萝卜 x 0.5 （黑胡椒，白芝麻） 白菜或其他菜（一点） 步骤👩‍🍳 调酱汁
生抽2勺+老抽1勺+耗油1.5勺+盐&amp;amp;淀粉若干
⌛同时：肥牛焯水到变色；番茄泡热水
处理食材
所有食材削皮+切丁
炒（按先后顺序）
煎土豆+番茄煮烂+放洋葱和胡萝卜+翻炒一会儿+加酱汁
煮
煮5分钟大概+加肥牛等其他+2分钟后出锅(可以撒些黑胡椒和芝麻)
PLUS😋 拌饭好吃 这个量够一个人吃3顿了，因为一碗饭不能配很多 仅需一道菜即可，足够方便 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E6%89%8B%E6%8A%8A%E6%8E%92%E9%AA%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E6%89%8B%E6%8A%8A%E6%8E%92%E9%AA%A8/</guid>
      <description>手把排骨 好吃指数：⭐⭐⭐
难易指数：💦💦
准备 食材 调料 排骨（肋排） 小米辣、蒜、香菜、葱、姜 青尖椒 白糖 小青柠 料酒 花椒粉 生抽 盐 步骤👩‍🍳 腌排骨
加料酒、姜丝、生粉、食盐、油搅拌均匀，冰箱腌制2小时
准备调料汁
用可食用的菜板准备（因为调料待会不过油了）。
切葱、小米辣、蒜、香菜碎放入碗中 加入生抽、白糖、食盐、花椒粉 挤入小青柠搅拌均匀 蒸排骨
将腌好的排骨码在盘子上，上面放上青尖椒，水沸后上锅蒸25分钟
调料汁继续调制
蒸完排骨后，将整好的青尖椒捣碎，加入步骤2的调料汁拌匀，并加入蒸排骨汁
将排骨和调料汁拌匀即可
PLUS😋 排骨一定要买那种骨头在中间的哦，香，有软骨也很嫩 排骨一定要腌一段时间，不然会有些腥味。有条件的，可以腌一晚上 酱汁很美味，也可以拌饭吃 青尖椒切的时候要小心，里面的籽尽量别碰到手，不然你会收获一双火辣辣的手 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E6%98%A5%E5%8D%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E6%98%A5%E5%8D%B7/</guid>
      <description>春卷 参考教程：https://www.xiachufang.com/recipe/102197411/
好吃指数：⭐⭐⭐
难易指数：💦💦💦
准备 食材 调料 猪肉*1/4斤 白胡椒粉 湿木耳*1.5片 生抽 黄瓜*0.5 盐 韭黄 糖 虾*几只 麻油 胡萝卜*一点 油 香菇 粉丝*一卷 春卷皮（两个人10张） 步骤👩‍🍳 蒸（或微波炉）春卷皮（因为是冷冻层拿出来的）
处理食材
切丁：猪头，木耳，韭黄，虾（生的剥壳剁烂），香菇 切丝：黄瓜，胡萝卜，粉丝 搅拌在一起调味（所有调料适量）
虾头煎出虾油，捞出虾头；放所有食材进去炒熟
包着吃
PLUS😋 调味个人觉得有点怪，但不知道哪里怪，可能是酱油或麻油导致的 肉可以少放点，因为蔬菜炒完会缩水，肉就显得太多 煎虾油后的虾头，也是一大美味呀！ </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E6%A4%B0%E5%AD%90%E9%B8%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E6%A4%B0%E5%AD%90%E9%B8%A1/</guid>
      <description>椰子鸡 好吃指数：⭐⭐⭐⭐
难易指数：💦💦💦
准备 食材 调料 椰子（椰青汁水多，椰皇椰肉厚） 小青柠 鸡肉（文昌鸡最适合，三黄鸡也可） 姜末（沙姜更正宗） 配料（比如木耳，魔芋结，玉米，日本豆腐） 蒜末 青菜 小米辣 步骤👩‍🍳 取椰肉和椰水（此步较麻烦，推荐直接买椰肉和椰水。但不得不说，自己取的更好吃） 椰青表皮用刀削掉，用刀背沿着头部敲一圈，就可以打开倒出椰水。 椰皇先用筷子把头上的洞戳开，倒出椰水；用刀背在椰子中部敲一圈，就可以打开了。再敲若干块，外面的壳也脱落了。就剩下椰肉和粘连的黑色椰皮，用削皮刀分离即得椰肉。椰肉切小块。 准备配料（洗+切） 调酱汁（调料表+生抽） 煮椰子鸡（椰子水+椰肉+若干水煮沸，加鸡肉【煮十五分钟以内】） PLUS😋 有条件一定用文昌鸡，清远鸡也试过，还是不如文昌鸡。个人感觉文昌鸡&amp;gt;三黄鸡&amp;gt;清远鸡 有条件不要买冷冻的鸡肉，口感不如冷藏的 我们习惯第一锅不要加配料，只煮鸡。因为其他配料可能会抢走椰子的清甜味 此道菜的复杂性在于椰子的处理，有椰肉和椰水后，简单如火锅 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E7%82%92%E7%8C%AA%E8%82%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E7%82%92%E7%8C%AA%E8%82%89/</guid>
      <description>炒猪肉 好吃指数：⭐⭐⭐
难易指数：💦
准备 食材 调料 猪肉（最好带点肥） 小米辣 蒜 料酒 耗油 生抽 盐 步骤👩‍🍳 腌肉
猪肉切薄片，加适量料酒、耗油、生抽、盐、油搅拌均匀
切
切小米辣和蒜片
炒肉
多放点油，加入小米辣和蒜片，加入肉片炒，加生抽，出锅
PLUS😋 本来想煎肉的，但可能有水出来，就变成了炒肉。不过有个技巧是，等到炒到后面时，水快干了，这时候很香，趁着这个劲多炒几下，会有煎香。 纯瘦肉会有点干，尤其是放了一阵子再吃的话。但是也不是特别柴，没条件也能尝试。 炒完不要洗锅，直接炒青菜。青菜的水会把炒肉粘锅的香味溶进去。 小米辣是炒肉的灵魂。 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E7%BA%A2%E6%A4%92%E7%82%92%E8%9B%8F%E5%AD%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E7%BA%A2%E6%A4%92%E7%82%92%E8%9B%8F%E5%AD%90/</guid>
      <description>红椒炒蛏子 参考教程：https://www.xiachufang.com/recipe/103899941/#/
好吃指数：⭐⭐⭐
难易指数：💦💦
准备 食材 调料 蛏子 盐 红椒（半个） 味精 姜 耗油 小葱 老抽 花蛤（顺便买了一点） 料酒 步骤👩‍🍳 稍微洗花蛤和蛏子即可（因为后面要剥壳） 焯水花蛤，蛏子（加姜片；别太久，不然会老） ⏳切红椒和小葱条状（葱白和葱叶分开）；切姜片 花蛤，蛏子剥壳 炒 热油爆香姜和葱白 放入红椒断生 放入花蛤，蛏子炒 加料酒、耗油、老抽、盐、味精 炒一会儿加葱叶，出锅 PLUS😋 蛏子推荐买菜市场中的带泥的，活的，肥美的好吃 炒花蛤同样好吃 红椒也好吃，甜甜的，不辣 味道不错，如果要辣点，可以加点小米辣 炒的时候大火翻炒，不要太久，不然会老 来自原作者：炒蛏子肉的时候可以适量加点水留点酱汁出来，用酱汁泡饭或是拌干面孩子都能吃上一大碗 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E7%BE%8A%E6%8E%92%E8%90%9D%E5%8D%9C%E6%B1%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E7%BE%8A%E6%8E%92%E8%90%9D%E5%8D%9C%E6%B1%A4/</guid>
      <description>羊排萝卜汤 参考教程：https://www.xiachufang.com/recipe/102856374
好吃指数：⭐⭐⭐
难易指数：💦💦
准备 食材 调料 羊排块 葱 萝卜*0.5 盐 姜 料酒 步骤👩‍🍳 羊排冷水焯水
萝卜切滚刀块（⌛焯水时）
煮
开水+羊排+葱段+姜+料酒，煮沸后转小火30分钟（珐琅锅） 加萝卜再20分钟 加葱花+盐，出锅 PLUS😋 超简单！ 下次水要多放点！ </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E7%BE%8A%E8%82%89%E6%89%8B%E6%8A%93%E9%A5%AD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E7%BE%8A%E8%82%89%E6%89%8B%E6%8A%93%E9%A5%AD/</guid>
      <description>羊肉手抓饭 参考教程：https://www.xiachufang.com/recipe/106681710
好吃指数：⭐⭐⭐⭐
难易指数：💦💦
准备 食材 调料 羊肉 十三香 洋葱*1 盐 胡萝卜*0.5 糖 蒜苗 玉米*0.5 步骤👩‍🍳 羊肉切块，洗，冷水焯水 准备食材（⌛焯水时） 切洋葱（丁）、胡萝卜（条）、蒜苗（丁）、玉米（粒） 炒 洋葱炒香+加羊肉+十三香+加胡萝卜/玉米 煮 加开水（淹没），加盐和糖，煮沸后中小火到1/3 煮饭 将锅里的所有倒进洗净的米中，汤汁看下是否适量（多减少加），开始煮饭。等饭熟了，加入蒜苗搅匀即可出锅。 PLUS😋 很香，羊肉味也ok！ （直接copy原教程）羊肉可以选羊腿肉，带点羊油更好吃。 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E8%92%9C%E6%B2%B9%E6%8B%8C%E9%9D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E8%92%9C%E6%B2%B9%E6%8B%8C%E9%9D%A2/</guid>
      <description>蒜油拌面 好吃指数：⭐⭐⭐⭐
难易指数：💦
准备 食材 调料 挂面 生抽 蒜 芝麻油 小米辣 醋 耗油 黑胡椒粉 步骤👩‍🍳 切蒜和小米辣 准备酱汁（生抽+芝麻油+醋+耗油+黑胡椒粉） 煮酱汁（小火，时间短一点） 放油，热蒜和小米辣 放第二步的酱汁 煮面，捞出拌酱汁即可 PLUS😋 味道很不错 煮完面直接将面倒到煮酱汁的锅里搅拌，更加均匀 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E8%B1%86%E8%85%90%E7%B4%AB%E8%8F%9C%E6%B1%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E8%B1%86%E8%85%90%E7%B4%AB%E8%8F%9C%E6%B1%A4/</guid>
      <description>豆腐紫菜汤 参考教程：https://www.xiachufang.com/recipe/100447540
好吃指数：⭐⭐
难易指数：💦
准备 食材 调料 豆腐（两块） 盐 紫菜 醋 小葱 味精 姜 步骤👩‍🍳 水泡干紫菜（大概1/2紫菜饼两人吃） 切 小葱丁 豆腐小块 姜片 煮 大火煮姜片和豆腐，水煮干 放紫菜（慢慢推开） 盐、味精、油、醋调味 煮一会儿即可，放小葱丁出锅 PLUS😋 味道比较单薄，不过也算是及格的简单式汤 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E8%B1%86%E8%A7%92%E7%82%92%E7%89%9B%E8%82%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E8%B1%86%E8%A7%92%E7%82%92%E7%89%9B%E8%82%89/</guid>
      <description>豆角炒牛肉 参考教程：https://www.xiachufang.com/recipe/105959639
好吃指数：⭐⭐⭐
难易指数：💦💦
准备 食材 调料 牛肉（一定请摊主切薄片）（二三十元） 生抽 豆角（其他蔬菜也可，如红萝卜、荷兰豆） 耗油 小黄瓜（不要也罢） 地瓜粉 蒜*4瓣 小米辣*2个 步骤👩‍🍳 腌肉
洗肉片，加一点盐、生抽2勺、耗油1勺、蒜4瓣切片拌匀；加一点地瓜粉拌匀；加一/两勺油拌匀
蔬菜处理
豆角洗，切段，焯水煮熟；快煮熟时，加入切好的小黄瓜断生即刻
炒牛肉
放油，炒小米辣，放牛肉炒【牛肉切薄片后熟很快，炒变色差不多就可】，先盛出
炒蔬菜
放油，炒豆角和小黄瓜（加点盐），放牛肉继续炒，放一点生抽炒，出锅
PLUS😋 最好用不粘锅炒牛肉，不然容易淀粉都黏在锅上 炒牛肉时油多一点，特别不是用不粘锅炒时 牛肉腌制时间充裕的话，放冰箱冷藏腌制几小时更好；没时间就不用腌制很久 最后一步放牛肉后，炒一会儿就出锅，防止炒老 很下饭 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E9%9F%AD%E9%BB%84%E7%82%92%E8%9B%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E9%9F%AD%E9%BB%84%E7%82%92%E8%9B%8B/</guid>
      <description>韭黄炒蛋 参考教程：https://www.xiachufang.com/recipe/104010704/#/
好吃指数：⭐⭐⭐⭐
难易指数：💦💦
准备 食材 调料 韭黄 生抽 鸡蛋*2 盐 香菇*2 糖 木耳*1片 味精 姜*1片 步骤👩‍🍳 处理食材
鸡蛋打散，加一点水和盐 韭黄切段，香菇和木耳切丝 炒
第一锅：油放多点，炒鸡蛋（打不打散无所谓） 第二锅：放油，姜片，炒香菇和木耳，加点水焖熟 第三锅：放油，同一个姜片，炒一会儿韭黄，放少量盐和糖；加入前两锅的食材加生抽一起炒，加味精，出锅 PLUS😋 放香菇和木耳只要是为了清理冰箱，如果没有，可以不放（或放其他食材）。但放香菇会使整道菜更香。 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E9%A3%9F%E6%9D%90%E7%AE%80%E9%99%8B%E7%89%88%E7%82%9D%E8%82%89%E6%B1%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E9%A3%9F%E6%9D%90%E7%AE%80%E9%99%8B%E7%89%88%E7%82%9D%E8%82%89%E6%B1%A4/</guid>
      <description>食材简陋版炝肉汤 参考教程：https://www.xiachufang.com/recipe/102116058/#/
好吃指数：⭐⭐⭐
难易指数：💦
准备 食材 调料 肉（前腿肉或里脊肉） 生抽 青菜 大蒜 洋葱x 0.3 盐 地瓜粉 鸡精 步骤👩‍🍳 腌肉片
肉切薄片，洗干净，加适量盐、鸡精、生抽腌制一段时间
处理食材（利用肉腌制的时间）
洗（青菜和洋葱）+切（青菜，洋葱【丝】，大蒜【丁】）
炒
雪平锅炒大蒜+洋葱，然后放水（冷热皆可）
煮
【煮之前】分次在肉里加生粉，每次放后搅拌均匀，确保每片肉裹上生粉
【煮】将肉片挨个放入锅内，再加青菜+盐，大概五分钟出锅
PLUS😋 食材准备的少，只买了1块钱的青菜+4块钱的前腿肉，加上家里已有的洋葱和大蒜。比起原教程，少了很多味道，下次有机会做个完整版的~~ 【直接粘贴教程里的小贴士】裹地瓜粉是关键，一定要一勺一勺往里加，这样才能均匀地粘上，最好用猪的前腿肉，毕竟这个部位的肉都比较好吃，肥瘦均匀 虽然调料简单，汤的味道还是不错的；肉有点🐖腥味，不过对我来说可以接受。 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E9%B8%A1%E8%9B%8B%E9%85%B1%E6%8B%8C%E9%9D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/03-fun/03e-cook/%E9%B8%A1%E8%9B%8B%E9%85%B1%E6%8B%8C%E9%9D%A2/</guid>
      <description>鸡蛋酱拌面 参考教程：https://www.xiachufang.com/recipe/104416251
好吃指数：⭐⭐
难易指数：💦
准备 食材 调料 挂面一人份 黄豆酱*1勺 鸡蛋*1 番茄酱*0.7勺 白胡椒粉 玉米淀粉 清水半碗 步骤👩‍🍳 调酱汁
所有调料按顺序加在一起，搅拌均匀
煎鸡蛋
油放多点，煎鸡蛋打大块散；酱汁煮沸，和鸡蛋一起煮一会儿，放一旁备用
煮面
面煮熟捞出，加上鸡蛋酱拌匀即可
PLUS😋 酱汁味道有点奇怪，鸡蛋也有点咸。所以下次黄豆酱一勺，番茄酱不要太多 适合快手早餐 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/04-tool/04a-linktool-index/ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/04-tool/04a-linktool-index/ai/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/04-tool/04a-linktool-index/%E5%B7%A5%E5%85%B7%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/04-tool/04a-linktool-index/%E5%B7%A5%E5%85%B7%E8%AE%B0%E5%BD%95/</guid>
      <description>待学习 readwise midjorney obsidian 工作流 1、使用ob写md文章，再用hugo渲染： 由于hugo的发布内容需要在/content/post中，所以将总工程的根目录workspace整体放到hugo文件结构的/content/post中。 坚果云同步时，还是只同步workspace文件夹即可。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pipony.github.io/post/workspace/04-tool/04c-macosios/macos/%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/workspace/04-tool/04c-macosios/macos/%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>文件/文件夹 显示文件夹中的隐藏文件 Command + Shift + .</description>
    </item>
    
  </channel>
</rss>
