<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on 2MUCH-Tech-Notes</title>
    <link>http://pipony.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on 2MUCH-Tech-Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Cindy</copyright>
    <lastBuildDate>Sun, 03 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://pipony.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ORACLE-存储过程</title>
      <link>http://pipony.github.io/post/database/oracle-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/database/oracle-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>ORACLE-存储过程 概念 存储过程(Stored Procedure)：
一组为了完成某功能的一段sql语句集（一种PL/SQL块），存储在数据库中，经过第一次编译后再次调用就无需再次编译，用户通过调用指定存储过程名称和给定参数来调用。当数据库启动时,会自动加载到数据库内存中,执行效率高。
 当对数据库进行复杂操作时(如对多个表进行Update、Insert、Query、Delete时），可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。
 函数和存储过程的区别 https://www.php.cn/oracle/489142.html#/
   存储过程 函数     用于在数据库中完成特定的操作或任务（如插入、删除等） 用于特定数据（如查询返回值）   程序头部声明用PROCEDURE 程序头部声明用FUNCTION   程序头部声明时不需要返回类型 程序头部声明时要描述返回类型，而且PL/SQL块至少要包括一个有效的RETURN语句   可以使用IN/OUT/IN OUT3种参数模式 可以使用IN/OUT/IN OUT3种参数模式   可以作为独立的PL/SQL语句执行 不能独立执行，必须作为表达式的一部分调用   可以通过OUT/IN OUT返回零个或多个值 对过RETURN语句返回一个值，且该值与声明部分一致，也可以通过OUT类型的参数带出变量   SQL语句（DML或SELECT）中不可以调用存储过程 SQL语句（DML或SELECT）中可以调用函数    优点  更快（无需再次编译） 模块性 可维护性高 节省网络传输（存储在数据库中） 更安全（存储过程控制执行权限）  存储过程创建语法 CREATE [OR REPLACE] PROCEDURE pro_name [(p1 in|out 数据格式,  p2 in|out 数据格式,  .</description>
    </item>
    
    <item>
      <title>ORACLE-序列</title>
      <link>http://pipony.github.io/post/database/oracle-nextval/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/database/oracle-nextval/</guid>
      <description>ORACLE-序列  背景：了解NEXTVAL的概念
 ORACLE序列 概念 是oacle提供的用于产生一系列唯一数字的数据库对象。主要用于提供主键值。
sequence是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。**其主要的用途是生成表的主键值，可以在插入语句中引用，在插入之前，获取序列号nextval值，然后进行插入。**也可以通过查询检查当前值，或使序列增至下一个值。（https://www.jb51.net/article/220007.htm#/）
创建方式 CREATE SEQUENCE sequence //创建序列名称   [INCREMENT BY n] //递增的序列值是n 如果n是正数就递增,如果是负数就递减 默认是1   [START WITH n] //开始的值,递增默认是minvalue 递减是maxvalue   [{MAXVALUE n | NOMAXVALUE}] //最大值   [{MINVALUE n | NOMINVALUE}] //最小值   [{CYCLE | NOCYCLE}] //循环/不循环   [{CACHE n | NOCACHE}];//分配并存入到内存中 CURRVAL CURRVAL 中存放序列的当前值
SELECT INR_REQUIRMENT_SQUENCE.CURRVAL FROM dual - 获取当前的sequence的值
CURRVAL = 最后一次对 NEXTVAL 的引用所返回的值
NEXTVAL NEXTVAL 返回序列中下一个有效的值，任何用户都可以引用</description>
    </item>
    
    <item>
      <title>SQL函数篇</title>
      <link>http://pipony.github.io/post/database/sql%E5%87%BD%E6%95%B0%E7%AF%87/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://pipony.github.io/post/database/sql%E5%87%BD%E6%95%B0%E7%AF%87/</guid>
      <description>SQL函数篇   lpad/rpad函数   lpad/rpad函数 此为Oracle函数。l/r(left/right)+pad(填充)，表示从左边/右边填充。
格式：lpad( string, padded_length, [ pad_string ] ) （rpad同理）
参数一：被填充/截取的原字符串
参数二：最终长度
参数三：填充的字符，若无赋值，则默认填充空格
注意：若原字符串长度大于参数二的长度，则lpad从左开始截取指定长度（rpad从右边）
SQL&amp;gt; select lpad(&amp;#39;abcde&amp;#39;,10,&amp;#39;x&amp;#39;) from dual; LPAD(&amp;#39;ABCDE&amp;#39;,10,&amp;#39;X&amp;#39;) -------------------- xxxxxabcde  SQL&amp;gt; select lpad(&amp;#39;abcde&amp;#39;,2) from dual; LPAD(&amp;#39;ABCDE&amp;#39;,2) --------------- ab 参考链接：https://blog.csdn.net/yulei_qq/article/details/17389901#/</description>
    </item>
    
    <item>
      <title>数据库无效对象</title>
      <link>http://pipony.github.io/post/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A0%E6%95%88%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/database/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A0%E6%95%88%E5%AF%B9%E8%B1%A1/</guid>
      <description>数据库无效对象  背景：报“ORACLE存在无效对象，可能影响应用性能，评估是否重建对象”
 概念  无效：INVALID 对象：视图、物化视图、函数、包、触发器等   无效 PL/SQL 对象和不可用索引会对性能产生影响。无效 PL/SQL 对象必须先进行重编译，然后才能使用。这需要在执行尝试访问 PL/SQL 程序包、过程或函数的第一个操作之前花费一段编译时间。如果 PL/SQL 重编译未成功，，则操作会因发生错误而失败。优化程序会忽略不可用索引。如果 SQL 语句性能的好坏取决于已标记为不可用的索引，则只有重建索引才能改善性能。
  如果查找到 INVALID 状态的 PL/SQL 对象，需要回答的第一个问题是“此对象曾经是 VALID 的吗？”应用程序开发人员常常会忘记清除不起作用的代码。如果 PL/SQL 对象因代码错误而无效，则除了纠正该错误之外，没有什么别的方法。如果该过程在过去曾经有效，最近才变为无效，则可选择以下两种方法解决这个问题：
1.不做任何处理。如果需要，大多数 PL/SQL 对象在调用时会自动重新编译。用户在对象重新编译时会经历短暂的延迟。（大多数情况下，这种延迟不十分明显。）
2.手动重新编译无效对象。
 无效对象产生的原因   当被引用对象的结构变更时，都会使得相关的依赖对象转变为INVALID状态
如视图A来源于表B，当表B的结构改变时，会导致视图A变成无效对象。但当再一次调用视图A时，会自动编译视图A，使其再次变为有效。
  发布SQL脚本时（包、存储过程、函数等），没有充分测试，编译时出错，这时对象变为无效。
  数据库升级、迁移时，出现大量无效对象(本质原因，臆测归结为原因1)
  诸如此类各种情况：例如，Oracle 会自动维护分区索引，对于全局索引，如果在对分区表操作时，没有指定update index，则会导致全局索引失效，需要重建。
  查找无效对象  统计失效对象  执行用户：SYSTEM用户或其他有权限的用户
SQL&amp;gt; select owner, object_name, object_type from dba_objects t where status = &amp;#39;INVALID&amp;#39; order by t.</description>
    </item>
    
    <item>
      <title>部分sql的user_io_wait_time值较大</title>
      <link>http://pipony.github.io/post/database/%E9%83%A8%E5%88%86sql%E7%9A%84user_io_wait_time%E5%80%BC%E8%BE%83%E5%A4%A7/</link>
      <pubDate>Sat, 14 May 2022 22:51:46 +0800</pubDate>
      
      <guid>http://pipony.github.io/post/database/%E9%83%A8%E5%88%86sql%E7%9A%84user_io_wait_time%E5%80%BC%E8%BE%83%E5%A4%A7/</guid>
      <description>部分sql的user_io_wait_time值较大  背景：报“针对近一个月的sql语句执行进行分析，每天执行较频繁的sql中，有几个sql的user_io_wait_time值较大，建议进行优化
 oracle sql 响应时间分析 1、按照IO等待取top5（https://blog.csdn.net/fengsd_sy/article/details/51322766#/）
select * from (select sql_text,  sql_id,  elapsed_time,  cpu_time,  user_io_wait_time from sys.v_$sqlarea order by 5 desc) where rownum &amp;lt; 6; 2、根据步骤1获取具体SQL详情
select event,  time_waited,  owner,  object_name,  current_file#,  current_block# from sys.v_$active_session_history a,  sys.dba_objects b where sql_id = &amp;#39;6gvch1xu9ca3g&amp;#39; and  a.current_obj# = b.object_id and  time_waited &amp;lt;&amp;gt; 0; </description>
    </item>
    
  </channel>
</rss>
